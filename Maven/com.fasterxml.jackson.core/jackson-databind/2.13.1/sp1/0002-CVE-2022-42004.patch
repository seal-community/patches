From 85690ab79ad4371700fbc8b52080caa34571199a Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Mon, 7 Aug 2023 18:48:50 +0300
Subject: [PATCH 2/3] Seal Security Hotfix for com.fasterxml.jackson.core:jackson-databind 2.13.1

This patch fixes:
  CVE-2022-42004

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/FasterXML/jackson-databind/tree/jackson-databind-2.13.1
---
 .../databind/DeserializationContext.java      | 18 +++++
 .../databind/deser/BeanDeserializer.java      | 16 +++++
 .../DeepArrayWrappingForDeser3582Test.java    | 57 +++++++++++++++
 .../deser/dos/DeepNestingCombinationTest.java | 69 +++++++++++++++++++
 4 files changed, 160 insertions(+)
 create mode 100644 src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java
 create mode 100644 src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepNestingCombinationTest.java

diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
index 9d4711b4a..e1f709cde 100644
--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
@@ -101,6 +101,7 @@ public abstract class DeserializationContext
     protected final int _featureFlags;
 
     protected int _primitiveRecursionDepth;
+    protected int _objectRecursionDepth;
     /**
      * Capabilities of the input format.
      *
@@ -177,6 +178,7 @@ public abstract class DeserializationContext
         _cache = cache;
         _featureFlags = 0;
         _primitiveRecursionDepth = 0;
+        _objectRecursionDepth = 0;
         _readCapabilities = null;
         _config = null;
         _injectableValues = null;
@@ -193,6 +195,7 @@ public abstract class DeserializationContext
         _config = src._config;
         _featureFlags = src._featureFlags;
         _primitiveRecursionDepth = 0;
+        _objectRecursionDepth = 0;
         _readCapabilities = src._readCapabilities;
         _view = src._view;
         _parser = src._parser;
@@ -217,6 +220,7 @@ public abstract class DeserializationContext
         _config = config;
         _featureFlags = config.getDeserializationFeatures();
          _primitiveRecursionDepth = 0;
+        _objectRecursionDepth = 0;
         _view = config.getActiveView();
         _parser = p;
         _injectableValues = injectableValues;
@@ -239,6 +243,7 @@ public abstract class DeserializationContext
         _config = config;
         _featureFlags = config.getDeserializationFeatures();
          _primitiveRecursionDepth = 0;
+        _objectRecursionDepth = 0;
         _view = null;
         _parser = null;
         _injectableValues = null;
@@ -255,6 +260,7 @@ public abstract class DeserializationContext
         _config = src._config;
         _featureFlags = src._featureFlags;
          _primitiveRecursionDepth = 0;
+        _objectRecursionDepth = 0;
         _readCapabilities = src._readCapabilities;
         _view = src._view;
         _injectableValues = null;
@@ -390,6 +396,18 @@ public abstract class DeserializationContext
         return (_featureFlags & feat.getMask()) != 0;
     }
 
+    public final int getObjectRecursionDepth(){
+        return _objectRecursionDepth;
+    }
+
+    public final void incObjectRecursionDepth() {
+        _objectRecursionDepth += 1;
+    }
+
+    public final void resetObjectRecursionDepth() {
+        _objectRecursionDepth = 0;
+    }
+
     public final int getPrimitiveRecursionDepth(){
         return _primitiveRecursionDepth;
     }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 943aa98ac..42ec48654 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -8,6 +8,7 @@ import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.cfg.CoercionAction;
 import com.fasterxml.jackson.databind.deser.impl.*;
 import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 import com.fasterxml.jackson.databind.util.IgnorePropertiesUtil;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 import com.fasterxml.jackson.databind.util.TokenBuffer;
@@ -628,7 +629,22 @@ public class BeanDeserializer
                 return ctxt.handleUnexpectedToken(getValueType(ctxt), JsonToken.START_ARRAY, p, null);
             }
             if (unwrap) {
+                // 23-Aug-2022, tatu: To prevent unbounded nested arrays, we better
+                //   check there is NOT another START_ARRAY lurking there..
+                if (p.currentToken() == JsonToken.START_ARRAY && ctxt.getObjectRecursionDepth() >= maxRecursionDepth) {
+                    JavaType targetType = getValueType(ctxt);
+                    return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,
+"Cannot deserialize value of type %s from deeply-nested JSON Array: only single wrapper allowed with `%s`",
+                            ClassUtil.getTypeDescription(targetType),
+                                    "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS");
+                }
+                if (p.currentToken() == JsonToken.START_ARRAY){
+                    ctxt.incObjectRecursionDepth();
+                } else {
+                    ctxt.resetObjectRecursionDepth();
+                }
                 final Object value = deserialize(p, ctxt);
+                ctxt.resetObjectRecursionDepth();
                 if (p.nextToken() != JsonToken.END_ARRAY) {
                     handleMissingEndArrayForSingle(p, ctxt);
                 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java
new file mode 100644
index 000000000..8b86c116b
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java
@@ -0,0 +1,57 @@
+package com.fasterxml.jackson.databind.deser.dos;
+
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
+
+public class DeepArrayWrappingForDeser3582Test extends BaseMapTest
+{
+    // 23-Aug-2022, tatu: Before fix, failed with 5000
+    private final static int TOO_DEEP_NESTING = 9999;
+    private final static int NOT_TOO_DEEP_NESTING = 9;
+
+    private final ObjectMapper MAPPER = jsonMapperBuilder()
+            .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)
+            .build();
+
+    public void testArrayWrapping() throws Exception
+    {
+        final String doc = _nestedDoc(TOO_DEEP_NESTING, "[ ", "] ", "{}");
+        try {
+            MAPPER.readValue(doc, Point.class);
+            fail("Should not pass");
+        } catch (MismatchedInputException e) {
+            verifyException(e, "Cannot deserialize");
+            verifyException(e, "nested JSON Array");
+            verifyException(e, "only single");
+        }
+    }
+
+    public void testArrayWrappingPass() throws Exception
+    {
+        final String doc = _nestedDoc(NOT_TOO_DEEP_NESTING, "[ ", "] ", "{}");
+        try {
+            MAPPER.readValue(doc, Point.class);
+        } catch (MismatchedInputException e) {
+            fail("Should not throw exception");
+        }
+    }
+
+    private String _nestedDoc(int nesting, String open, String close, String content) {
+        StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));
+        for (int i = 0; i < nesting; ++i) {
+            sb.append(open);
+            if ((i & 31) == 0) {
+                sb.append("\n");
+            }
+        }
+        sb.append("\n").append(content).append("\n");
+        for (int i = 0; i < nesting; ++i) {
+            sb.append(close);
+            if ((i & 31) == 0) {
+                sb.append("\n");
+            }
+        }
+        return sb.toString();
+    }
+
+}
diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepNestingCombinationTest.java b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepNestingCombinationTest.java
new file mode 100644
index 000000000..65cc25d5e
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepNestingCombinationTest.java
@@ -0,0 +1,69 @@
+
+package com.fasterxml.jackson.databind.deser.dos;
+
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.annotation.JsonRootName;
+
+// [databind#3397], wrt JsonNode
+@JsonRootName("rootNode")
+public class DeepNestingCombinationTest extends BaseMapTest
+{
+    public String a;
+    public int b;
+    public DeepNestingCombinationTest c;
+    private final static int TOO_DEEP_NESTING = 15;
+    private final static int NOT_TOO_DEEP_NESTING = 8;
+    private final String docTemplate = "%s{\"a\":\"asd\", \"b\":%s5%s, \"c\":%s{\"a\":\"as\", \"b\":2, \"c\":null}%s}%s";
+    private final ObjectMapper MAPPER = new ObjectMapper().enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
+
+    public void testObjectWithArray() throws Exception
+    {
+        String doc = fillTemplate(NOT_TOO_DEEP_NESTING, NOT_TOO_DEEP_NESTING, NOT_TOO_DEEP_NESTING);
+        DeepNestingCombinationTest n = MAPPER.readValue(doc, DeepNestingCombinationTest.class);
+        assertEquals(n.a, "asd");
+        assertEquals(n.b, 5);
+        assertEquals(n.c.a, "as");
+        assertEquals(n.c.b, 2);
+    }
+
+    public void testObjectWithArrayFail() throws Exception
+    {
+      try {
+        String doc = fillTemplate(TOO_DEEP_NESTING, NOT_TOO_DEEP_NESTING, NOT_TOO_DEEP_NESTING);
+        DeepNestingCombinationTest n = MAPPER.readValue(doc, DeepNestingCombinationTest.class);
+        fail("Should not pass");
+      } catch (Exception e) {
+            verifyException(e, "Cannot deserialize");
+            verifyException(e, "deeply-nested");
+      }
+    }
+
+    public void testObjectWithPrimitiveFail() throws Exception
+    {
+      try {
+        String doc = fillTemplate(NOT_TOO_DEEP_NESTING, TOO_DEEP_NESTING, NOT_TOO_DEEP_NESTING);
+        DeepNestingCombinationTest n = MAPPER.readValue(doc, DeepNestingCombinationTest.class);
+        fail("Should not pass");
+      } catch (Exception e) {
+            verifyException(e, "Cannot deserialize");
+            verifyException(e, "nested Arrays");
+      }
+    }
+
+    public void testObjectWithInObjectFail() throws Exception
+    {
+      try {
+        String doc = fillTemplate(NOT_TOO_DEEP_NESTING, NOT_TOO_DEEP_NESTING, TOO_DEEP_NESTING);
+        DeepNestingCombinationTest n = MAPPER.readValue(doc, DeepNestingCombinationTest.class);
+        fail("Should not pass");
+      } catch (Exception e) {
+            verifyException(e, "Cannot deserialize");
+            verifyException(e, "deeply-nested");
+      }
+    }
+
+    private String fillTemplate(int root, int primitive, int object){
+        return String.format(docTemplate, "[".repeat(root), "[".repeat(primitive),
+            "]".repeat(primitive), "[".repeat(object), "]".repeat(object), "]".repeat(root));
+    }
+}
-- 

