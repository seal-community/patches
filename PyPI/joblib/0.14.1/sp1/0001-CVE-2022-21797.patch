From 3fe1da1d1e82a9f5bf0d44e1237f6516439f8c20 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Thu, 18 May 2023 12:17:54 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for joblib 0.14.1

This patch fixes:
  CVE-2022-21797

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/joblib/joblib/tree/0.14.1
---
 joblib/parallel.py           | 10 ++++++++--
 joblib/test/test_parallel.py | 10 ++++++++++
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/joblib/parallel.py b/joblib/parallel.py
index b673425..8018a07 100644
--- a/joblib/parallel.py
+++ b/joblib/parallel.py
@@ -456,7 +456,9 @@ class Parallel(Logger):
         pre_dispatch: {'all', integer, or expression, as in '3*n_jobs'}
             The number of batches (of tasks) to be pre-dispatched.
             Default is '2*n_jobs'. When batch_size="auto" this is reasonable
-            default and the workers should never starve.
+            default and the workers should never starve. Note that only basic
+            arithmetics are allowed here and no modules can be used in this
+            expression.
         batch_size: int or 'auto', default: 'auto'
             The number of atomic tasks to dispatch at once to each
             worker. When individual evaluations are very fast, dispatching
@@ -973,7 +975,11 @@ class Parallel(Logger):
         else:
             self._original_iterator = iterator
             if hasattr(pre_dispatch, 'endswith'):
-                pre_dispatch = eval(pre_dispatch)
+                pre_dispatch = eval(
+                    pre_dispatch,
+                    {"n_jobs": n_jobs, "__builtins__": {}},  # globals
+                    {}  # locals
+                )
             self._pre_dispatch_amount = pre_dispatch = int(pre_dispatch)
 
             # The main thread will consume the first pre_dispatch items and
diff --git a/joblib/test/test_parallel.py b/joblib/test/test_parallel.py
index 317ce4f..d2095e8 100644
--- a/joblib/test/test_parallel.py
+++ b/joblib/test/test_parallel.py
@@ -1770,3 +1770,13 @@ def test_loky_reuse_workers(n_jobs):
         parallel_call(n_jobs)
         executor = get_reusable_executor(reuse=True)
         assert executor == first_executor
+
+
+def test_pre_dispatch_eval_rce():
+    def f():
+        return 1
+
+    p = Parallel(n_jobs=3, pre_dispatch="sys.exit(0)")
+    with pytest.raises(NameError):
+        #  sys is not imported, so a NameError should be raised
+        p(delayed(f)() for i in range(10))
-- 
2.39.2 (Apple Git-143)

