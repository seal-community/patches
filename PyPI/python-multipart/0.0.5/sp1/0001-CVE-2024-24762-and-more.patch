From 85a9fabbe3a4cd145abc37b29ef9fe5c8cfcfe9f Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Tue, 13 Feb 2024 12:52:50 +0200
Subject: [PATCH 1/1] Seal Security Hotfix for python-multipart 0.0.5

This patch fixes:
  CVE-2024-24762
  GHSA-93gm-qmq6-w238
  GHSA-2jv5-9r88-3w3p

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/Kludex/python-multipart/tree/0.0.5
---
 multipart/multipart.py            | 46 ++++++++++++++++---------------
 multipart/tests/test_multipart.py | 10 +++++++
 2 files changed, 34 insertions(+), 22 deletions(-)

diff --git a/multipart/multipart.py b/multipart/multipart.py
index 27aaecb..666cf1a 100644
--- a/multipart/multipart.py
+++ b/multipart/multipart.py
@@ -22,6 +22,7 @@ import logging
 import tempfile
 from io import BytesIO
 from numbers import Number
+from email.message import Message
 
 # Unique missing object.
 _missing = object()
@@ -99,38 +100,39 @@ def parse_options_header(value):
     Parses a Content-Type header into a value in the following format:
         (content_type, {parameters})
     """
+    # Uses email.message.Message to parse the header as described in PEP 594.
+    # Ref: https://peps.python.org/pep-0594/#cgi
     if not value:
         return (b'', {})
 
-    # If we are passed a string, we assume that it conforms to WSGI and does
-    # not contain any code point that's not in latin-1.
-    if isinstance(value, text_type):            # pragma: no cover
-        value = value.encode('latin-1')
+    # If we are passed bytes, we assume that it conforms to WSGI, encoding in latin-1.
+    if isinstance(value, bytes):  # pragma: no cover
+        value = value.decode('latin-1')
+
+    # For types
+    assert isinstance(value, text_type), 'Value should be a string by now'
 
     # If we have no options, return the string as-is.
-    if b';' not in value:
-        return (value.lower().strip(), {})
+    if ';' not in value:
+        return (value.lower().strip().encode('latin-1'), {})
 
     # Split at the first semicolon, to get our value and then options.
-    ctype, rest = value.split(b';', 1)
+    # ctype, rest = value.split(b';', 1)
+    message = Message()
+    message['content-type'] = value
+    params = message.get_params()
+    # If there were no parameters, this would have already returned above
+    assert params, 'At least the content type value should be present'
+    ctype = params.pop(0)[0].encode('latin-1')
     options = {}
-
-    # Parse the options.
-    for match in OPTION_RE.finditer(rest):
-        key = match.group(1).lower()
-        value = match.group(2)
-        if value[0] == QUOTE and value[-1] == QUOTE:
-            # Unquote the value.
-            value = value[1:-1]
-            value = value.replace(b'\\\\', b'\\').replace(b'\\"', b'"')
-
+    for param in params:
+        key, value = param
         # If the value is a filename, we need to fix a bug on IE6 that sends
         # the full file path instead of the filename.
-        if key == b'filename':
-            if value[1:3] == b':\\' or value[:2] == b'\\\\':
-                value = value.split(b'\\')[-1]
-
-        options[key] = value
+        if key == 'filename':
+            if value[1:3] == ':\\' or value[:2] == '\\\\':
+                value = value.split('\\')[-1]
+        options[key.encode('latin-1')] = value.encode('latin-1')
 
     return ctype, options
 
diff --git a/multipart/tests/test_multipart.py b/multipart/tests/test_multipart.py
index dbb7ff1..4331269 100644
--- a/multipart/tests/test_multipart.py
+++ b/multipart/tests/test_multipart.py
@@ -277,6 +277,16 @@ class TestParseOptionsHeader(unittest.TestCase):
 
         self.assertEqual(p[b'filename'], b'file.txt')
 
+    def test_cve_2024_24762(self):
+        # This is a test for CVE-2024-24762
+        # https://nvd.nist.gov/vuln/detail/CVE-2024-24762
+        import time
+
+        start_time = time.time()
+        parse_options_header('application/x-www-form-urlencoded; !="\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')
+        end_time = time.time()
+        self.assertLess(end_time - start_time, 1.0)
+
 
 class TestBaseParser(unittest.TestCase):
     def setUp(self):
-- 
2.39.3

