From 7e4f8dc95c372eb790f5c26a994c72ed3d5fa464 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Tue, 30 May 2023 12:58:48 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for nth-check 1.0.2

This patch fixes:
  CVE-2021-3803

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/fb55/nth-check/tree/v1.0.2
---
 parse.js | 88 ++++++++++++++++++++++++++++++++++++++++++++------------
 test.js  | 13 +++++++++
 2 files changed, 82 insertions(+), 19 deletions(-)

diff --git a/parse.js b/parse.js
index 5302951..a2fb396 100644
--- a/parse.js
+++ b/parse.js
@@ -2,8 +2,10 @@ module.exports = parse;
 
 //following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
 
-//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
-var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;
+// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
+var whitespace = new Set([9, 10, 12, 13, 32]);
+var ZERO = "0".charCodeAt(0);
+var NINE = "9".charCodeAt(0);
 
 /*
 	parses a nth-check formula, returns an array of two numbers
@@ -15,26 +17,74 @@ function parse(formula){
 		return [2, 0];
 	} else if(formula === "odd"){
 		return [2, 1];
-	} else {
-		var parsed = formula.match(re_nthElement);
+	}
 
-		if(!parsed){
-			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
-		}
+	// Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
+
+	var idx = 0;
+
+	var a = 0;
+	var sign = readSign();
+	var number = readNumber();
 
-		var a;
+	if (idx < formula.length && formula.charAt(idx) === "n") {
+		idx++;
+		a = sign * ((number === null || number === undefined) ? 1 : number);
 
-		if(parsed[1]){
-			a = parseInt(parsed[1], 10);
-			if(isNaN(a)){
-				if(parsed[1].charAt(0) === "-") a = -1;
-				else a = 1;
-			}
-		} else a = 0;
+		skipWhitespace();
+
+		if (idx < formula.length) {
+			sign = readSign();
+			skipWhitespace();
+			number = readNumber();
+		} else {
+			sign = number = 0;
+		}
+	}
 
-		return [
-			a,
-			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
-		];
+	// Throw if there is anything else
+	if (number === null || idx < formula.length) {
+		throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
 	}
+
+	return [a, sign * number];
+	
+   function readSign() {
+        if (formula.charAt(idx) === "-") {
+            idx++;
+            return -1;
+        }
+
+        if (formula.charAt(idx) === "+") {
+            idx++;
+        }
+
+        return 1;
+    }
+
+    function readNumber() {
+        var start = idx;
+        var value = 0;
+
+        while (
+            idx < formula.length &&
+            formula.charCodeAt(idx) >= ZERO &&
+            formula.charCodeAt(idx) <= NINE
+        ) {
+            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
+            idx++;
+        }
+
+        // Return `null` if we didn't read anything.
+        return idx === start ? null : value;
+    }
+
+    function skipWhitespace() {
+        while (
+            idx < formula.length &&
+            whitespace.has(formula.charCodeAt(idx))
+        ) {
+            idx++;
+        }
+    }
 }
diff --git a/test.js b/test.js
index ceb9f1b..f75d238 100644
--- a/test.js
+++ b/test.js
@@ -92,6 +92,17 @@ function stupidNth(formula, limit){
 	});
 }
 
+function testCVE2021_3803() {
+	var time = Date.now(); 
+	var attack_str = '2n' + ' '.repeat(100000)+"!";
+	try {
+		nthCheck.parse(attack_str);
+	} catch (e) {
+		var time_cost = Date.now() - time; 
+		assert.ok(time_cost < 1000, "CVE-2021-3803: "+time_cost+"ms");
+	}
+}
+
 process.stdout.write("- parser");
 process.stdout.write("\n  - parse invalid:\t");
 parseInvalid();
@@ -99,4 +110,6 @@ process.stdout.write("X\n  - parse valid:\t");
 parseValid();
 process.stdout.write("X\n- check values:  \t");
 testValid();
+process.stdout.write("X\n- CVE-2021-3803:  \t");
+testCVE2021_3803();
 process.stdout.write("X\n");
-- 
2.39.2 (Apple Git-143)

