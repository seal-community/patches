From 48350914fa254f5a1ef8c60c6f0561c37b22a4cd Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Mon, 5 Jun 2023 15:42:09 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for vm2 3.9.12

This patch fixes:
  CVE-2023-29017

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/patriksimek/vm2/tree/3.9.12
---
 lib/setup-sandbox.js | 25 +++++++++++--
 test/vm.js           | 89 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 110 insertions(+), 4 deletions(-)

diff --git a/lib/setup-sandbox.js b/lib/setup-sandbox.js
index f6cbb8e..539ce04 100644
--- a/lib/setup-sandbox.js
+++ b/lib/setup-sandbox.js
@@ -276,13 +276,30 @@ if (typeof OriginalCallSite === 'function') {
 				return;
 			}
 			const newWrapped = (error, sst) => {
+				const sandboxSst = ensureThis(sst);
 				if (localArrayIsArray(sst)) {
-					for (let i=0; i < sst.length; i++) {
-						const cs = sst[i];
-						if (typeof cs === 'object' && localReflectGetPrototypeOf(cs) === OriginalCallSite.prototype) {
-							sst[i] = new CallSite(cs);
+					if (sst === sandboxSst) {
+						for (let i=0; i < sst.length; i++) {
+							const cs = sst[i];
+							if (typeof cs === 'object' && localReflectGetPrototypeOf(cs) === OriginalCallSite.prototype) {
+								sst[i] = new CallSite(cs);
+							}
+						}
+					} else {
+						sst = [];
+						for (let i=0; i < sandboxSst.length; i++) {
+							const cs = sandboxSst[i];
+							localReflectDefineProperty(sst, i, {
+								__proto__: null,
+								value: new CallSite(cs),
+								enumerable: true,
+								configurable: true,
+								writable: true
+							});
 						}
 					}
+				} else {
+					sst = sandboxSst;
 				}
 				return value(error, sst);
 			};
diff --git a/test/vm.js b/test/vm.js
index d4f6a9f..7e3f109 100644
--- a/test/vm.js
+++ b/test/vm.js
@@ -8,6 +8,8 @@ const {VM, VMScript} = require('..');
 const {INTERNAL_STATE_NAME} = require('../lib/transformer');
 const NODE_VERSION = parseInt(process.versions.node.split('.')[0]);
 const {inspect} = require('util');
+const os = require('os');
+const fs = require('fs');
 
 global.isHost = true;
 
@@ -1127,6 +1129,93 @@ describe('VM', () => {
 		});
 	});
 
+	describe('CVE-2023-29017', () => {
+		let uncaughtExceptionListeners;
+		beforeEach(() => {
+			uncaughtExceptionListeners = process.listeners('uncaughtException');
+
+			process.removeAllListeners('uncaughtException');
+		});
+
+		afterEach(() => {
+			process.removeAllListeners('uncaughtException');
+			uncaughtExceptionListeners.forEach((listener) => {
+				process.on('uncaughtException', listener);
+			});
+		});
+		it('exploit 1', (done) => {
+			let uncaughtExceptionThrown = false;
+			const tmpFileName = os.tmpdir() + '/tmp' + Math.random();
+
+			const vm2 = new VM();
+
+			const code = `
+			Error.prepareStackTrace = (e, frames) => {
+				frames.constructor.constructor('return process')().mainModule.require('child_process').execSync('touch ${tmpFileName}'); 
+			};
+			
+			(async ()=>{}).constructor('return process')();
+			`;
+			process.once('uncaughtException', (err) => {
+				uncaughtExceptionThrown = true;
+				try {
+					assert.equal(err.stack, undefined);
+				} catch (e) { }
+				const sandboxEscaped = fs.existsSync(tmpFileName);
+				if (sandboxEscaped) {
+					done(Error('Sandbox escaped'));
+				} else {
+					done();
+				}
+			});
+
+			vm2.run(code);
+			setTimeout(() => {
+				if (!uncaughtExceptionThrown) {
+					done();
+				}
+			}, 10);
+		});
+		it('exploit 2', (done) => {
+			let uncaughtExceptionThrown = false;
+			const tmpFileName = os.tmpdir() + '/tmp' + Math.random();
+
+			const vm2 = new VM();
+
+			const code = `
+			Error.prepareStackTrace = (e, frames) => {
+				frames.constructor.constructor('return process')().mainModule.require('child_process').execSync('touch ${tmpFileName}'); 
+			};
+			
+			async function aa(){
+				eval("1=1");
+			}
+			
+			aa();
+			`;
+
+			process.once('uncaughtException', (err) => {
+				uncaughtExceptionThrown = true;
+				try {
+					assert.equal(err.stack, undefined);
+				} catch (e) { }
+				const sandboxEscaped = fs.existsSync(tmpFileName);
+				if (sandboxEscaped) {
+					done(Error('Sandbox escaped'));
+				} else {
+					done();
+				}
+			});
+
+			vm2.run(code);
+			setTimeout(() => {
+				if (!uncaughtExceptionThrown) {
+					done();
+				}
+			}, 10);
+		});
+	});
+
 	after(() => {
 		vm = null;
 	});
-- 
2.37.1 (Apple Git-137.1)

