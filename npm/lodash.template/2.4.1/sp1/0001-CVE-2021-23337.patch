From c9bb45d76bd278f8d21f18d0ee1044ccfef80a16 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Tue, 26 Sep 2023 11:24:32 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for lodash.template 2.4.1

This patch fixes:
  CVE-2021-23337

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/lodash/lodash/tree/2.4.1
---
 lodash.js    | 20 ++++++++++++++++++++
 test/test.js |  6 ++++++
 2 files changed, 26 insertions(+)

diff --git a/lodash.js b/lodash.js
index 29a14dc..1c2974b 100644
--- a/lodash.js
+++ b/lodash.js
@@ -87,6 +87,18 @@
     'toLocaleString', 'toString', 'valueOf'
   ];
 
+  /**
+  * Used to validate the `validate` option in `_.template` variable.
+  *
+  * Forbids characters which could potentially change the meaning of the function argument definition:
+  * - "()," (modification of function parameters)
+  * - "=" (default value)
+  * - "[]{}" (destructuring of function parameters)
+  * - "/" (beginning of a comment)
+  * - whitespace
+  */
+  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
+
   /** Used to make template sourceURLs easier to identify */
   var templateCounter = 0;
 
@@ -161,6 +173,8 @@
     '\u2029': 'u2029'
   };
 
+  var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
+
   /** Used as a reference to the global object */
   var root = (objectTypes[typeof window] && window) || this;
 
@@ -6647,6 +6661,12 @@
         variable = 'obj';
         source = 'with (' + variable + ') {\n' + source + '\n}\n';
       }
+      // Throw an error if a forbidden character was found in `variable`, to prevent
+      // potential command injection attacks.
+      else if (reForbiddenIdentifierChars.test(variable)) {
+        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
+      }
+
       // cleanup code by stripping empty strings
       source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
         .replace(reEmptyStringMiddle, '$1')
diff --git a/test/test.js b/test/test.js
index f7d7226..b7328e9 100644
--- a/test/test.js
+++ b/test/test.js
@@ -8641,6 +8641,14 @@
       });
     });
 
+    test('should forbid code injection through the "variable" options', function(assert) {
+      expect(1);
+
+      raises(function () {
+        _.template('', null, { 'variable': '){console.log(process.env)}; with(obj' });
+      }, Error);
+    });
+
     test('should handle `null` `thisArg` arguments', 30, function() {
       var thisArg,
           callback = function() { thisArg = this; },
-- 


