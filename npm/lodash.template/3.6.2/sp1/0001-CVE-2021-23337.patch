From 54ec5f7f5ba243b68ac522e41305de228a9d8e17 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Thu, 21 Sep 2023 11:18:09 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for lodash.template 3.6.2

This patch fixes:
  CVE-2021-23337

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/lodash/lodash/tree/3.10.1
---
 lodash.js    | 21 ++++++++++++++++++++-
 test/test.js |  8 ++++++++
 2 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/lodash.js b/lodash.js
index 58965fa..8c3288c 100644
--- a/lodash.js
+++ b/lodash.js
@@ -42,7 +42,8 @@
       LAZY_MAP_FLAG = 2;
 
   /** Used as the `TypeError` message for "Functions" methods. */
-  var FUNC_ERROR_TEXT = 'Expected a function';
+  var FUNC_ERROR_TEXT = 'Expected a function',
+      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
 
   /** Used as the internal argument placeholder. */
   var PLACEHOLDER = '__lodash_placeholder__';
@@ -104,6 +105,18 @@
   /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
   var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;
 
+  /**
+  * Used to validate the `validate` option in `_.template` variable.
+  *
+  * Forbids characters which could potentially change the meaning of the function argument definition:
+  * - "()," (modification of function parameters)
+  * - "=" (default value)
+  * - "[]{}" (destructuring of function parameters)
+  * - "/" (beginning of a comment)
+  * - whitespace
+  */
+  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
+
   /** Used to match backslashes in property paths. */
   var reEscapeChar = /\\(\\)?/g;
 
@@ -10782,6 +10795,12 @@
       if (!variable) {
         source = 'with (obj) {\n' + source + '\n}\n';
       }
+      // Throw an error if a forbidden character was found in `variable`, to prevent
+      // potential command injection attacks.
+      else if (reForbiddenIdentifierChars.test(variable)) {
+        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
+      }
+
       // Cleanup code by stripping empty strings.
       source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
         .replace(reEmptyStringMiddle, '$1')
diff --git a/test/test.js b/test/test.js
index 4230d55..4368777 100644
--- a/test/test.js
+++ b/test/test.js
@@ -18223,6 +18223,14 @@
       });
     });
 
+    test('should forbid code injection through the "variable" options', function(assert) {
+      assert.expect(1);
+
+      assert.raises(function () {
+        _.template('', { 'variable': '){console.log(process.env)}; with(obj' });
+      });
+    });
+
     test('should handle `null` `thisArg` arguments', 44, function() {
       var expected = (function() { return this; }).call(null);
 
-- 


