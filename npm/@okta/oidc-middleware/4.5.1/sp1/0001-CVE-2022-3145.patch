From bb2ada96a8131d4ed5fad6c803afdf0768ece3d9 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Sun, 1 Oct 2023 13:44:03 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for @okta/oidc-middleware 4.5.1

This patch fixes:
  CVE-2022-3145

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/okta/okta-oidc-middleware/tree/okta-oidc-middleware-4.5.1
---
 CHANGELOG.md                            |  4 +++
 src/oidcUtil.js                         |  3 +-
 test/e2e/harness/server.js              |  4 +++
 test/e2e/page-objects/OktaSignInPage.js |  2 ++
 test/e2e/page-objects/ProtectedPage.js  |  9 +++---
 test/e2e/specs/basic.js                 | 39 +++++++++++++++++++++++++
 test/unit/oidcUtil.spec.js              | 17 +++++++++++
 7 files changed, 73 insertions(+), 5 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index fe17230..54a8105 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 # 4.5.1-sp1
 
+### Bug Fixes
+
+-[#53](https://github.com/okta/okta-oidc-middleware/pull/53) Fix: prevents open redirects
+
 # 4.5.1
 
 ### Bug Fixes
diff --git a/src/oidcUtil.js b/src/oidcUtil.js
index 0b60538..1a8597d 100644
--- a/src/oidcUtil.js
+++ b/src/oidcUtil.js
@@ -142,7 +142,8 @@ oidcUtil.ensureAuthenticated = (context, options = {}) => {
     if (negotiator.mediaType() === 'text/html') {
       if (!isAuthenticated) {
         if (req.session) {
-          req.session.returnTo = req.originalUrl || req.url;
+          // collapse any leading slashes to a single slash to prevent open redirects (OKTA-499372)
+          req.session.returnTo = (req.originalUrl || req.url).replace(/^\/+/, '/');
         }
         let url = options.redirectTo;
         if (!url) {
diff --git a/test/e2e/harness/server.js b/test/e2e/harness/server.js
index b858baa..4ecba92 100644
--- a/test/e2e/harness/server.js
+++ b/test/e2e/harness/server.js
@@ -53,6 +53,10 @@ module.exports = class DemoServer {
       res.send(JSON.stringify(req.userContext));
     });
 
+    app.get('/*', oidc.ensureAuthenticated(), (req, res) => {
+      res.send(JSON.stringify(req.userContext));
+    });
+
     return new Promise((resolve, reject) => {
       oidc.on('error', err => {
         console.log('Unable to start the server', err);
diff --git a/test/e2e/page-objects/OktaSignInPage.js b/test/e2e/page-objects/OktaSignInPage.js
index 38bc260..30807cb 100644
--- a/test/e2e/page-objects/OktaSignInPage.js
+++ b/test/e2e/page-objects/OktaSignInPage.js
@@ -24,6 +24,8 @@ module.exports = class OktaSignInPage {
   }
 
   async signIn({username, password}) {
+    await this.username.clear();
+    await this.password.clear();
     await this.username.sendKeys(username);
     await this.password.sendKeys(password);
     await this.submit.click();
diff --git a/test/e2e/page-objects/ProtectedPage.js b/test/e2e/page-objects/ProtectedPage.js
index 92df6dc..fed47f3 100644
--- a/test/e2e/page-objects/ProtectedPage.js
+++ b/test/e2e/page-objects/ProtectedPage.js
@@ -14,16 +14,17 @@ const constants = require('../util/constants');
 const EC = protractor.ExpectedConditions;
 
 module.exports = class ProtectedPage {
-  constructor() {
+  constructor(path) {
     this.body = $('body');
+    this.path = constants.BASE_URI + (path || '/protected');
   }
 
   async load() {
-    await browser.get('/protected');
+    await browser.get(this.path);
   }
 
-  async waitUntilVisible() {
-    await browser.wait(EC.urlIs(constants.BASE_URI + '/protected'), 10000, 'wait for protected url');
+  async waitUntilVisible(path=this.path) {
+    await browser.wait(EC.urlIs(path), 10000, 'wait for protected url(' + path + ')');
   }
 
   async getBodyText() {
diff --git a/test/e2e/specs/basic.js b/test/e2e/specs/basic.js
index e2f99e3..33e1165 100644
--- a/test/e2e/specs/basic.js
+++ b/test/e2e/specs/basic.js
@@ -16,6 +16,7 @@ const OktaSignInPage = require('../page-objects/OktaSignInPage');
 const ProtectedPage = require('../page-objects/ProtectedPage');
 const HomePage = require('../page-objects/HomePage');
 
+
 browser.waitForAngularEnabled(false);
 
 describe('Basic login redirect', () => {
@@ -77,4 +78,42 @@ describe('Basic login redirect', () => {
     await privatePage.load();
     await signInPage.waitUntilVisible();
   });
+
+  it('should handle open redirect attempt gracefully', async () => {
+    // attempt to instigate an open redirect to okta.com
+    const path = '//okta.com'
+    const privatePage = new ProtectedPage(path);
+    await privatePage.load();
+
+    // we're not logged in, so we should redirect
+    const signInPage = new OktaSignInPage();
+    await signInPage.waitUntilVisible();
+    await signInPage.signIn({
+      username: constants.USERNAME,
+      password: constants.PASSWORD
+    });
+
+    // wait for protected page to appear with contents
+    // NOTE: may see failure here if open redirect occurs (see OKTA-499372)
+    await privatePage.waitUntilVisible(constants.BASE_URI + path.slice(1));   // leading '/' will be stripped off
+
+    expect(privatePage.getBodyText()).toContain('sub');
+
+    // Default response_type of library should contain an accessToken and idToken
+    expect(privatePage.getBodyText()).toContain('access_token');
+    expect(privatePage.getBodyText()).toContain('id_token');
+
+    // navigate to home page
+    const homePage = new HomePage();
+    await homePage.load();
+    await homePage.waitUntilVisible();
+
+    expect(homePage.getBodyText()).toContain('Welcome home');
+
+    // navigate to Okta logout and follow redirects
+    await homePage.performLogout();
+    await homePage.waitUntilVisible(); // after all redirects
+
+    expect(browser.getPageSource()).not.toContain('Welcome home');
+  });
 });
diff --git a/test/unit/oidcUtil.spec.js b/test/unit/oidcUtil.spec.js
index 4070bd3..5d822ba 100644
--- a/test/unit/oidcUtil.spec.js
+++ b/test/unit/oidcUtil.spec.js
@@ -145,4 +145,21 @@ describe('oidcUtil', function () {
       expect(res.redirect).toBeCalledWith('http://localhost:56789/foo');
     });
   });
+
+  it('strips leading slashes to prevent open redirects', () => {
+    // see OKTA-499372
+    const requestHandler = oidcUtil.ensureAuthenticated({}, {
+      redirectTo: '/login'
+    });
+    const req = {
+      session: {},
+      url: '//okta.com'
+    };
+    const res = {
+      redirect: jest.fn()
+    };
+    requestHandler(req, res, () => {});
+    expect(res.redirect).toHaveBeenCalledWith('/login');
+    expect(req.session.returnTo).toBe('/okta.com');
+  });
 })
-- 
2.39.3

