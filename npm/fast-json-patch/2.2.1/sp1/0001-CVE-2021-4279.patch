From d933ea7ec2d774101c5318d3d72d097d79fa1013 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Sun, 28 May 2023 16:12:18 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for fast-json-patch 2.2.1

This patch fixes:
  CVE-2021-4279

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/Starcounter-Jack/JSON-Patch/tree/v2.2.1
---
 src/core.ts           |  7 +++++--
 test/spec/coreSpec.js | 27 ++++++++++++++++++++++++++-
 2 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/src/core.ts b/src/core.ts
index 35f2c21..9a304a4 100644
--- a/src/core.ts
+++ b/src/core.ts
@@ -256,8 +256,11 @@ export function applyOperation<T>(document: T, operation: Operation, validateOpe
     while (true) {
       key = keys[t];
 
-      if(banPrototypeModifications && key == '__proto__') {
-        throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
+      if(banPrototypeModifications && 
+          (key == '__proto__' || 
+          (key == 'prototype' && t>0 && keys[t-1] == 'constructor'))
+        ) {
+        throw new TypeError('JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
       }
 
       if (validateOperation) {
diff --git a/test/spec/coreSpec.js b/test/spec/coreSpec.js
index a73e341..8c204fd 100644
--- a/test/spec/coreSpec.js
+++ b/test/spec/coreSpec.js
@@ -1936,7 +1936,7 @@ describe('undefined - JS to JSON projection / JSON to JS extension', function()
 
     it(`should not allow __proto__ modifications without unsetting the banPrototypeModifications flag and should throw an error`, function() {
       const expectedErrorMessage =
-        'JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README';
+        'JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README';
 
       function SomeClass() {
         this.foo = 'bar';
@@ -1958,5 +1958,30 @@ describe('undefined - JS to JSON projection / JSON to JS extension', function()
       expect(() => jsonpatch.applyPatch(arr, patch)).toThrow(new TypeError(expectedErrorMessage));
       expect(arr.x).toEqual(undefined);
     });
+
+    it(`should not allow __proto__ constructor modifications without unsetting the banPrototypeModifications flag and should throw an error`, function() {
+      const expectedErrorMessage =
+        'JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README';
+
+      function SomeClass() {
+        this.foo = 'bar';
+      }
+
+      let doc = new SomeClass();
+      let otherDoc = new SomeClass();
+
+      const patch = [
+        { op: 'replace', path: `/constructor/prototype/x`, value: 'polluted' }
+      ];
+
+      expect(() => jsonpatch.applyPatch(doc, patch)).toThrow(new TypeError(expectedErrorMessage));
+
+      expect(otherDoc.x).toEqual(undefined);
+      expect(doc.x).toEqual(undefined);
+
+      let arr = [];
+      expect(() => jsonpatch.applyPatch(arr, patch)).toThrow(new TypeError(expectedErrorMessage));
+      expect(arr.x).toEqual(undefined);
+    });
   });
 });
-- 
2.37.1 (Apple Git-137.1)

