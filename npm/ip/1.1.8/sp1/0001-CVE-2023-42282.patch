From 5689e8dc21d2601c52e70d194117dc902fb6727d Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Mon, 12 Feb 2024 10:38:53 +0200
Subject: [PATCH 1/1] Seal Security Hotfix for ip 1.1.8

This patch fixes:
  CVE-2023-42282

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/indutny/node-ip/tree/v1.1.8
---
 lib/ip.js        | 62 ++++++++++++++++++++++++++++++++----------------
 test/api-test.js |  9 +++++++
 2 files changed, 51 insertions(+), 20 deletions(-)

diff --git a/lib/ip.js b/lib/ip.js
index 5b5ccc2..699ed44 100644
--- a/lib/ip.js
+++ b/lib/ip.js
@@ -6,17 +6,33 @@ ip.toBuffer = function (ip, buff, offset) {
   offset = ~~offset;
 
   var result;
+  var sections;
 
   if (this.isV4Format(ip)) {
     result = buff || new Buffer(offset + 4);
-    ip.split(/\./g).map((byte) => {
-      result[offset++] = parseInt(byte, 10) & 0xff;
+    sections = ip.split(/\./g);
+    sections.map((byte, i) => {
+      // by default assume that the radix is 10
+      var radix = 10;
+      // if the buffer has at least 2 characters and starts with 0
+      if (byte.length > 1 && byte[0] === '0') {
+        // the radix is either 16 if it start with 0x or 8 if it starts with 0
+        radix = (byte[1] === 'x' || byte[1] === 'X') ? 16 : 8;
+      }
+      // if it's the last section - then it parse the section to the last index, otherwise according to the offset
+      // for example - parsing "127" should yield "0.0.0.1", while "127.1" should yield "127.0.0.1"
+      var index = sections.length - 1 == i ? offset + 3 : offset + i;
+      result[index] = parseInt(byte, radix) & 0xff;
     });
   } else if (this.isV6Format(ip)) {
-    var sections = ip.split(':', 8);
+    sections = ip.split(':', 8);
 
     var i;
     for (i = 0; i < sections.length; i++) {
+      // since "1" is both a valid IPv4 and a IPv6 element, we verify if it's an IPv6 element first and skip it in that case
+      if (ipv6ElementRegex.test(sections[i])) {
+        continue;
+      }
       var isv4 = this.isV4Format(sections[i]);
       var v4Buffer;
 
@@ -83,7 +99,8 @@ ip.toString = function (buff, offset, length) {
   return result;
 };
 
-var ipv4Regex = /^(\d{1,3}\.){3,3}\d{1,3}$/;
+var ipv6ElementRegex = /^[0-9a-f]{0,4}$/i;
+var ipv4Regex = /^(((0x[0-9a-f]{1,2})|(\d{1,4}))\.){0,3}((0x[0-9a-f]{1,2})|(\d{1,4})){1,3}$/i;
 var ipv6Regex = /^(::)?(((\d{1,3}\.){3}(\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;
 
 ip.isV4Format = function (ip) {
@@ -311,17 +328,18 @@ ip.isEqual = function (a, b) {
 };
 
 ip.isPrivate = function (addr) {
-  return /^(::f{4}:)?10\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i
-    .test(addr)
-    || /^(::f{4}:)?192\.168\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr)
-    || /^(::f{4}:)?172\.(1[6-9]|2\d|30|31)\.([0-9]{1,3})\.([0-9]{1,3})$/i
-      .test(addr)
-    || /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr)
-    || /^(::f{4}:)?169\.254\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr)
-    || /^f[cd][0-9a-f]{2}:/i.test(addr)
-    || /^fe80:/i.test(addr)
-    || /^::1$/.test(addr)
-    || /^::$/.test(addr);
+  if (ip.isLoopback(addr)) return true;
+  var parsed = ip.toBuffer(addr);
+  if ((parsed.length === 16 && parsed[0] === 0 && parsed[1] === 0 && parsed[2] === 0 && parsed[3] === 0 && parsed[4] === 0 && parsed[5] === 0 && parsed[6] === 0 && parsed[7] === 0 && parsed[8] === 0 && parsed[9] === 0 && parsed[10] === 0xff && parsed[11] === 0xff) || 
+      parsed.length === 4) {
+    return (parsed[parsed.length - 4] === 10) || 
+      (parsed[parsed.length - 4] === 192 && parsed[parsed.length - 3] === 168) || 
+      (parsed[parsed.length - 4] === 172 && (parsed[parsed.length - 3] >= 16 && parsed[parsed.length - 3] <= 31)) || 
+      (parsed[parsed.length - 4] === 169 && parsed[parsed.length - 3] === 254);
+  } else if (parsed.length === 16) {
+    if (parsed[0] === 0xfc || parsed[0]  === 0xfd) return true;
+  }
+  return false;
 };
 
 ip.isPublic = function (addr) {
@@ -329,11 +347,15 @@ ip.isPublic = function (addr) {
 };
 
 ip.isLoopback = function (addr) {
-  return /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/
-    .test(addr)
-    || /^fe80::1$/.test(addr)
-    || /^::1$/.test(addr)
-    || /^::$/.test(addr);
+  var parsed = ip.toBuffer(addr);
+  if ((parsed.length === 16 && parsed[0] === 0 && parsed[1] === 0 && parsed[2] === 0 && parsed[3] === 0 && parsed[4] === 0 && parsed[5] === 0 && parsed[6] === 0 && parsed[7] === 0 && parsed[8] === 0 && parsed[9] === 0 && parsed[10] === 0xff && parsed[11] === 0xff) || 
+      parsed.length === 4) {
+    return parsed[parsed.length - 4] === 127;
+  } else if (parsed.length === 16) {
+    if (parsed[0] === 0xfe && parsed[1]  === 0x80) return true;
+    if (parsed[0] === 0 && parsed[1] === 0 && parsed[2] === 0 && parsed[3] === 0 && parsed[4] === 0 && parsed[5] === 0 && parsed[6] === 0 && parsed[7] === 0 && parsed[8] === 0 && parsed[9] === 0 && parsed[10] === 0 && parsed[11] === 0 && parsed[12] === 0 && parsed[13] === 0 && parsed[14] === 0 && (parsed[15] === 0 || parsed[15] == 1)) return true;
+  }
+  return false;
 };
 
 ip.loopback = function (family) {
diff --git a/test/api-test.js b/test/api-test.js
index f0fd222..16035b6 100644
--- a/test/api-test.js
+++ b/test/api-test.js
@@ -300,6 +300,15 @@ describe('IP library for node.js', () => {
       assert.equal(ip.isPrivate('::1'), true);
       assert.equal(ip.isPrivate('fe80::1'), true);
     });
+
+    it('CVE-2023-42282', () => {
+      assert.equal(ip.isPrivate('0x7f.1'), true);
+      assert.equal(ip.isPrivate('0x7f.0.1'), true);
+      assert.equal(ip.isPrivate('0x7f.0.0.1'), true);
+      assert.equal(ip.isPrivate('0177.1'), true);
+      assert.equal(ip.isPrivate('0177.0.1'), true);
+      assert.equal(ip.isPrivate('0177.0.0.1'), true);
+    });
   });
 
   describe('loopback() method', () => {
-- 
2.39.3

