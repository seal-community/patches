From e408fe428dd2879241c04580899883b1977a4ed6 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Tue, 31 Oct 2023 19:48:37 +0200
Subject: [PATCH 2/2] Seal Security Hotfix for merge 1.2.1

This patch fixes:
  CVE-2020-28499

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/yeikos/js.merge/tree/v1.2.1
---
 merge.js       |  1 +
 merge.min.js   |  2 +-
 tests/tests.js | 15 +++++++++++++++
 3 files changed, 17 insertions(+), 1 deletion(-)

diff --git a/merge.js b/merge.js
index adf4c09..b8bb6fc 100644
--- a/merge.js
+++ b/merge.js
@@ -84,6 +84,7 @@
 			return extend;
 
 		for (var key in extend) {
+			if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;
 
 			if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {
 
diff --git a/merge.min.js b/merge.min.js
index 1590706..9e7ab78 100644
--- a/merge.min.js
+++ b/merge.min.js
@@ -2,2 +2,2 @@
 
-;(function(e){function r(e,t){if(s(e)!=="object")return t;for(var n in t){if(s(e[n])==="object"&&s(t[n])==="object"){e[n]=r(e[n],t[n])}else{e[n]=t[n]}}return e}function i(e,n,i){var o=i[0],u=i.length;if(e||s(o)!=="object")o={};for(var a=0;a<u;++a){var f=i[a],l=s(f);if(l!=="object")continue;for(var c in f){if(c==="__proto__"||c==="constructor"||c==="prototype")continue;var h=e?t.clone(f[c]):f[c];if(n){o[c]=r(o[c],h)}else{o[c]=h}}}return o}function s(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}var t=function(e){return i(e===true,false,arguments)},n="merge";t.recursive=function(e){return i(e===true,true,arguments)};t.clone=function(e){var n=e,r=s(e),i,o;if(r==="array"){n=[];o=e.length;for(i=0;i<o;++i)n[i]=t.clone(e[i])}else if(r==="object"){n={};for(i in e)n[i]=t.clone(e[i])}return n};if(e){module.exports=t}else{window[n]=t}})(typeof module==="object"&&module&&typeof module.exports==="object"&&module.exports);
\ No newline at end of file
+;(function(e){function r(e,t){if(s(e)!=="object")return t;for(var n in t){if(n==='__proto__'||n==='constructor'||n==='prototype')continue;if(s(e[n])==="object"&&s(t[n])==="object"){e[n]=r(e[n],t[n])}else{e[n]=t[n]}}return e}function i(e,n,i){var o=i[0],u=i.length;if(e||s(o)!=="object")o={};for(var a=0;a<u;++a){var f=i[a],l=s(f);if(l!=="object")continue;for(var c in f){if(c==="__proto__"||c==="constructor"||c==="prototype")continue;var h=e?t.clone(f[c]):f[c];if(n){o[c]=r(o[c],h)}else{o[c]=h}}}return o}function s(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}var t=function(e){return i(e===true,false,arguments)},n="merge";t.recursive=function(e){return i(e===true,true,arguments)};t.clone=function(e){var n=e,r=s(e),i,o;if(r==="array"){n=[];o=e.length;for(i=0;i<o;++i)n[i]=t.clone(e[i])}else if(r==="object"){n={};for(i in e)n[i]=t.clone(e[i])}return n};if(e){module.exports=t}else{window[n]=t}})(typeof module==="object"&&module&&typeof module.exports==="object"&&module.exports);
\ No newline at end of file
diff --git a/tests/tests.js b/tests/tests.js
index 8731178..0a230da 100644
--- a/tests/tests.js
+++ b/tests/tests.js
@@ -179,6 +179,21 @@ test('merge.recursive (prototype pollution attack)', function() {
 
 	);
 
+	deepEqual(
+
+		merge.recursive({ deep: {} }, JSON.parse('{ "deep": { "__proto__": {"b": true} }}')),
+
+		{ deep: {} }
+
+	);
+
+	deepEqual(
+
+		{}['b'],
+
+		undefined
+
+	);
 });
 
 test('merge.recursive (clone)', function() {
-- 


