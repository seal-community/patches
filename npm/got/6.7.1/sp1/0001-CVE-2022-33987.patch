From 8241e91f4ddadcfbd7bd50b7774d0dbc01cb8d32 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Sun, 10 Sep 2023 13:13:29 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for got 6.7.1

This patch fixes:
  CVE-2022-33987

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/sindresorhus/got/tree/v6.7.1
---
 index.js            | 10 ++++++++++
 test/redirects.js   | 32 ++++++++++++++++++++++++++++++++
 test/unix-socket.js | 16 ++++++++++++++++
 3 files changed, 58 insertions(+)

diff --git a/index.js b/index.js
index 31a64dd..436e76b 100644
--- a/index.js
+++ b/index.js
@@ -18,6 +18,10 @@ const isRetryAllowed = require('is-retry-allowed');
 const Buffer = require('safe-buffer').Buffer;
 const pkg = require('./package');
 
+function isUnixSocketURL(opts) {
+	return opts.protocol === 'unix:' || opts.hostname === 'unix';
+}
+
 function requestAsEventEmitter(opts) {
 	opts = opts || {};
 
@@ -45,6 +49,12 @@ function requestAsEventEmitter(opts) {
 
 				redirectUrl = urlLib.resolve(urlLib.format(opts), bufferString);
 				const redirectOpts = Object.assign({}, opts, urlLib.parse(redirectUrl));
+				if (!isUnixSocketURL(opts) && isUnixSocketURL(redirectOpts)) {
+					const err = new got.RequestError({}, opts);
+					err.message = 'Cannot redirect to UNIX socket';
+					ee.emit('error', err);
+					return;
+				}
 
 				ee.emit('redirect', res, redirectOpts);
 
diff --git a/test/redirects.js b/test/redirects.js
index d54df6d..4e7215f 100644
--- a/test/redirects.js
+++ b/test/redirects.js
@@ -92,10 +92,42 @@ test.before('setup', async () => {
 		res.end();
 	});
 
+	http.on('/protocol', (req, res) => {
+		res.writeHead(302, {
+			location: 'unix:/var/run/docker.sock:/containers/json'
+		});
+		res.end();
+	});
+
+	http.on('/hostname', (req, res) => {
+		res.writeHead(302, {
+			location: 'http://unix:/var/run/docker.sock:/containers/json'
+		});
+		res.end();
+	});
+
 	await http.listen(http.port);
 	await https.listen(https.port);
 });
 
+test('cannot redirect to unix protocol', async t => {
+	try {
+		await got(`${http.url}/protocol`);
+		t.fail('Exception was not thrown');
+	} catch (err) {
+		t.is(err.message, 'Cannot redirect to UNIX socket');
+	}
+});
+
+test('cannot redirect to unix protocol2', async t => {
+	try {
+		await got(`${http.url}/hostname`);
+		t.fail('Exception was not thrown');
+	} catch (err) {
+		t.is(err.message, 'Cannot redirect to UNIX socket');
+	}
+});
+
 test('follows redirect', async t => {
 	t.is((await got(`${http.url}/finite`)).body, 'reached');
 });
diff --git a/test/unix-socket.js b/test/unix-socket.js
index 5ea490f..b3e00b1 100644
--- a/test/unix-socket.js
+++ b/test/unix-socket.js
@@ -15,6 +15,17 @@ test.before('setup', async () => {
 		res.end('ok');
 	});
 
+	s.on('/foo', (req, res) => {
+		res.writeHead(302, {
+			location: '/bar'
+		});
+		res.end();
+	});
+
+	s.on('/bar', (req, res) => {
+		res.end('ok');
+	});
+
 	await s.listen(socketPath);
 });
 
@@ -28,6 +39,11 @@ test('protocol-less works', async t => {
 	t.is((await got(url)).body, 'ok');
 });
 
+test('redirects work', async t => {
+	const url = format('http://unix:%s:%s', socketPath, '/foo');
+	t.is((await got(url)).body, 'ok');
+});
+
 test.after('cleanup', async () => {
 	await s.close();
 });
-- 


