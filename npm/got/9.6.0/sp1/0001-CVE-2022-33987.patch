From b45704072f983d3abf7e94a59c9de2e495dce156 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Sun, 1 Oct 2023 15:45:11 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for got 9.6.0

This patch fixes:
  CVE-2022-33987

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/sindresorhus/got/tree/v9.6.0
---
 source/request-as-event-emitter.js |  8 ++++++++
 source/utils/is-unix-socket-url.js |  4 ++++
 test/redirects.js                  | 26 ++++++++++++++++++++++++++
 test/unix-socket.js                | 16 ++++++++++++++++
 4 files changed, 54 insertions(+)
 create mode 100644 source/utils/is-unix-socket-url.js

diff --git a/source/request-as-event-emitter.js b/source/request-as-event-emitter.js
index 79586af..088e303 100644
--- a/source/request-as-event-emitter.js
+++ b/source/request-as-event-emitter.js
@@ -15,6 +15,7 @@ const getResponse = require('./get-response');
 const progress = require('./progress');
 const {CacheError, UnsupportedProtocolError, MaxRedirectsError, RequestError, TimeoutError} = require('./errors');
 const urlToOptions = require('./utils/url-to-options');
+const isUnixSocketURL = require('./utils/is-unix-socket-url');
 
 const getMethodRedirectCodes = new Set([300, 301, 302, 303, 304, 305, 307, 308]);
 const allMethodRedirectCodes = new Set([300, 303, 307, 308]);
@@ -131,6 +132,13 @@ module.exports = (options, input) => {
 						// Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604
 						const redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();
 						const redirectURL = new URL(redirectBuffer, currentUrl);
+						if (!isUnixSocketURL(options) && isUnixSocketURL(redirectURL)) {
+							const err = new RequestError({}, options);
+							err.message = 'Cannot redirect to UNIX socket';
+							emitError(err);
+							return;
+						}
+
 						redirectString = redirectURL.toString();
 
 						redirects.push(redirectString);
diff --git a/source/utils/is-unix-socket-url.js b/source/utils/is-unix-socket-url.js
new file mode 100644
index 0000000..cd6572a
--- /dev/null
+++ b/source/utils/is-unix-socket-url.js
@@ -0,0 +1,4 @@
+'use strict';
+module.exports = url => {
+	return url.protocol === 'unix:' || url.hostname === 'unix';
+};
diff --git a/test/redirects.js b/test/redirects.js
index 4f09503..d9477c4 100644
--- a/test/redirects.js
+++ b/test/redirects.js
@@ -118,6 +118,20 @@ test.before('setup', async () => {
 		response.end();
 	});
 
+	http.on('/protocol', (request, response) => {
+		response.writeHead(302, {
+			location: 'unix:/var/run/docker.sock:/containers/json'
+		});
+		response.end();
+	});
+
+	http.on('/hostname', (request, response) => {
+		response.writeHead(302, {
+			location: 'http://unix:/var/run/docker.sock:/containers/json'
+		});
+		response.end();
+	});
+
 	await http.listen(http.port);
 	await https.listen(https.port);
 });
@@ -127,6 +141,18 @@ test.after('cleanup', async () => {
 	await https.close();
 });
 
+test('cannot redirect to unix protocol', async t => {
+	const error = await t.throwsAsync(got(`${http.url}/protocol`));
+	t.is(error.message, 'Cannot redirect to UNIX socket');
+	t.is(error.name, 'RequestError');
+});
+
+test('cannot redirect to unix protocol2', async t => {
+	const error = await t.throwsAsync(got(`${http.url}/hostname`));
+	t.is(error.message, 'Cannot redirect to UNIX socket');
+	t.is(error.name, 'RequestError');
+});
+
 test('follows redirect', async t => {
 	const {body, redirectUrls} = await got(`${http.url}/finite`);
 	t.is(body, 'reached');
diff --git a/test/unix-socket.js b/test/unix-socket.js
index bb6a94d..c4f8332 100644
--- a/test/unix-socket.js
+++ b/test/unix-socket.js
@@ -20,6 +20,17 @@ if (process.platform !== 'win32') {
 			response.end('ok');
 		});
 
+		s.on('/foofoo', (req, res) => {
+			res.writeHead(302, {
+				location: '/bar'
+			});
+			res.end();
+		});
+
+		s.on('/bar', (req, res) => {
+			res.end('ok');
+		});
+
 		await s.listen(socketPath);
 	});
 
@@ -45,4 +56,9 @@ if (process.platform !== 'win32') {
 	test('throws on invalid URL', async t => {
 		await t.throwsAsync(got('unix:'));
 	});
+
+	test('redirects work', async t => {
+		const url = format('http://unix:%s:%s', socketPath, '/foofoo');
+		t.is((await got(url)).body, 'ok');
+	});
 }
-- 


