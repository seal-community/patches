From 7ce8c47ab23948f1751a050a49eda561c762ce1f Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Thu, 28 Sep 2023 15:40:34 +0300
Subject: [PATCH 1/4] Seal Security Hotfix for lodash 4.17.11

This patch fixes:
  CVE-2019-10744

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/lodash/lodash/tree/4.17.11
---
 lodash.js    | 17 +++++++++++++----
 test/test.js | 11 +++++++++++
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/lodash.js b/lodash.js
index 48ca706..f376d15 100644
--- a/lodash.js
+++ b/lodash.js
@@ -6605,7 +6605,7 @@
     }
 
     /**
-     * Gets the value at `key`, unless `key` is "__proto__".
+     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
      *
      * @private
      * @param {Object} object The object to query.
@@ -6613,6 +6613,10 @@
      * @returns {*} Returns the property value.
      */
     function safeGet(object, key) {
+      if (key === 'constructor' && typeof object[key] === 'function') {
+       return;
+      }
+
       if (key == '__proto__') {
         return;
       }
@@ -14799,9 +14803,12 @@
       , 'g');
 
       // Use a sourceURL for easier debugging.
+      // The sourceURL gets injected into the source that's eval-ed, so be careful
+      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
+      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
       var sourceURL = '//# sourceURL=' +
-        ('sourceURL' in options
-          ? options.sourceURL
+        (hasOwnProperty.call(options, 'sourceURL')
+          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
           : ('lodash.templateSources[' + (++templateCounter) + ']')
         ) + '\n';
 
@@ -14834,7 +14841,9 @@
 
       // If `variable` is not specified wrap a with-statement around the generated
       // code to add the data object to the top of the scope chain.
-      var variable = options.variable;
+      // Like with sourceURL, we take care to not check the option's prototype,
+      // as this configuration is a code injection vector.
+      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
       if (!variable) {
         source = 'with (obj) {\n' + source + '\n}\n';
       }
diff --git a/test/test.js b/test/test.js
index 35aed9c..61e542f 100644
--- a/test/test.js
+++ b/test/test.js
@@ -4712,6 +4712,17 @@
       var actual = _.defaultsDeep({ 'a': ['abc'] }, { 'a': 'abc' });
       assert.deepEqual(actual.a, ['abc']);
     });
+
+    QUnit.test('should not indirectly merge `Object` properties', function(assert) {
+      assert.expect(1);
+
+      _.defaultsDeep({}, { 'constructor': { 'a': 1 } });
+
+      var actual = 'a' in Object;
+      delete Object.a;
+
+      assert.notOk(actual);
+    });
   }());
 
   /*--------------------------------------------------------------------------*/
-- 


