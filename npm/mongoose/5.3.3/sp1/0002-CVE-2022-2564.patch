From 37de8fa4918a08aa901437cc87d6eb5618f8a0a8 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Wed, 20 Sep 2023 18:15:30 +0300
Subject: [PATCH 2/3] Seal Security Hotfix for mongoose 5.3.3

This patch fixes:
  CVE-2022-2564

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/Automattic/mongoose/tree/5.3.3
---
 lib/helpers/specialProperties.js | 3 +++
 lib/schema.js                    | 7 +++++++
 lib/utils.js                     | 3 +++
 test/schema.test.js              | 9 +++++++++
 4 files changed, 22 insertions(+)
 create mode 100644 lib/helpers/specialProperties.js

diff --git a/lib/helpers/specialProperties.js b/lib/helpers/specialProperties.js
new file mode 100644
index 000000000..1e1aca50a
--- /dev/null
+++ b/lib/helpers/specialProperties.js
@@ -0,0 +1,3 @@
+'use strict';
+
+module.exports = new Set(['__proto__', 'constructor', 'prototype']);
\ No newline at end of file
diff --git a/lib/schema.js b/lib/schema.js
index 4dce9cf9b..ea4c8dc07 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -379,6 +379,10 @@ Schema.prototype.add = function add(obj, prefix) {
   for (let i = 0; i < keys.length; ++i) {
     const key = keys[i];
 
+    if (utils.specialProperties.has(key)) {
+      continue;
+    }
+
     if (obj[key] == null) {
       throw new TypeError('Invalid value for schema path `' + prefix + key + '`');
     }
@@ -526,6 +530,9 @@ Schema.prototype.path = function(path, obj) {
   let branch = this.tree;
 
   subpaths.forEach(function(sub, i) {
+    if (utils.specialProperties.has(sub)) {
+      throw new Error('Cannot set special property `' + sub + '` on a schema');
+    }
     if (!branch[sub]) {
       branch[sub] = {};
     }
diff --git a/lib/utils.js b/lib/utils.js
index 3918cf968..067cf08ca 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -13,11 +13,14 @@ const sliced = require('sliced');
 const mpath = require('mpath');
 const ms = require('ms');
 const Buffer = require('safe-buffer').Buffer;
+const specialProperties = require('./helpers/specialProperties');
 
 let MongooseBuffer;
 let MongooseArray;
 let Document;
 
+exports.specialProperties = specialProperties;
+
 /*!
  * Produces a collection name from model `name`. By default, just returns
  * the model name
diff --git a/test/schema.test.js b/test/schema.test.js
index 0ca64278e..cc8a04967 100644
--- a/test/schema.test.js
+++ b/test/schema.test.js
@@ -1873,4 +1873,13 @@ describe('schema', function() {
 
     return Promise.resolve();
   });
+  it('disallows setting special properties with `add()` or constructor (gh-12085)', function() {
+    const maliciousPayload = '{"__proto__.toString": "Number"}';
+
+    assert.throws(() => {
+      mongoose.Schema(JSON.parse(maliciousPayload));
+    }, /__proto__/);
+
+    assert.ok({}.toString());
+  });
 });
-- 
2.39.3 (Apple Git-145)

