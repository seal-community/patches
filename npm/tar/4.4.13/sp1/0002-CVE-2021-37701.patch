From 9ab877d5cc5149329e69173947f00c4884819f2c Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Mon, 29 Jan 2024 11:22:16 +0200
Subject: [PATCH 2/5] Seal Security Hotfix for tar 4.4.13

This patch fixes:
  CVE-2021-37701

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/isaacs/node-tar/tree/v4.4.13
---
 lib/mkdir.js                   | 39 ++++++++++++++-----------
 lib/normalize-windows-path.js  |  8 ++++++
 lib/pack.js                    |  7 +++--
 lib/unpack.js                  | 52 ++++++++++++++++++----------------
 lib/write-entry.js             |  5 ++--
 test/normalize-windows-path.js | 31 ++++++++++++++++++++
 6 files changed, 96 insertions(+), 46 deletions(-)
 create mode 100644 lib/normalize-windows-path.js
 create mode 100644 test/normalize-windows-path.js

diff --git a/lib/mkdir.js b/lib/mkdir.js
index c6a154c..586145b 100644
--- a/lib/mkdir.js
+++ b/lib/mkdir.js
@@ -8,6 +8,7 @@ const mkdirp = require('mkdirp')
 const fs = require('fs')
 const path = require('path')
 const chownr = require('chownr')
+const normPath = require('./normalize-windows-path.js')
 
 class SymlinkError extends Error {
   constructor (symlink, path) {
@@ -33,7 +34,11 @@ class CwdError extends Error {
   }
 }
 
-const mkdir = module.exports = (dir, opt, cb) => {
+const cGet = (cache, key) => cache.get(normPath(key))
+const cSet = (cache, key, val) => cache.set(normPath(key), val)
+
+module.exports = (dir, opt, cb) => {
+  dir = normPath(dir)
   // if there's any overlap between mask and mode,
   // then we'll need an explicit chmod
   const umask = opt.umask
@@ -49,13 +54,13 @@ const mkdir = module.exports = (dir, opt, cb) => {
   const preserve = opt.preserve
   const unlink = opt.unlink
   const cache = opt.cache
-  const cwd = opt.cwd
+  const cwd = normPath(opt.cwd)
 
   const done = (er, created) => {
     if (er)
       cb(er)
     else {
-      cache.set(dir, true)
+      cSet(cache, dir, true)
       if (created && doChown)
         chownr(created, uid, gid, er => done(er))
       else if (needChmod)
@@ -65,7 +70,7 @@ const mkdir = module.exports = (dir, opt, cb) => {
     }
   }
 
-  if (cache && cache.get(dir) === true)
+  if (cache && cGet(cache, dir) === true)
     return done()
 
   if (dir === cwd)
@@ -79,7 +84,7 @@ const mkdir = module.exports = (dir, opt, cb) => {
     return mkdirp(dir, mode, done)
 
   const sub = path.relative(cwd, dir)
-  const parts = sub.split(/\/|\\/)
+  const parts = sub.split('/')
   mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done)
 }
 
@@ -88,7 +93,7 @@ const mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {
     return cb(null, created)
   const p = parts.shift()
   const part = base + '/' + p
-  if (cache.get(part))
+  if (cGet(cache, part))
     return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)
   fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb))
 }
@@ -121,7 +126,8 @@ const onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => er => {
   }
 }
 
-const mkdirSync = module.exports.sync = (dir, opt) => {
+module.exports.sync = (dir, opt) => {
+  dir = normPath(dir)
   // if there's any overlap between mask and mode,
   // then we'll need an explicit chmod
   const umask = opt.umask
@@ -137,17 +143,17 @@ const mkdirSync = module.exports.sync = (dir, opt) => {
   const preserve = opt.preserve
   const unlink = opt.unlink
   const cache = opt.cache
-  const cwd = opt.cwd
+  const cwd = normPath(opt.cwd)
 
   const done = (created) => {
-    cache.set(dir, true)
+    cSet(cache, dir, true)
     if (created && doChown)
       chownr.sync(created, uid, gid)
     if (needChmod)
       fs.chmodSync(dir, mode)
   }
 
-  if (cache && cache.get(dir) === true)
+  if (cache && cGet(cache, dir) === true)
     return done()
 
   if (dir === cwd) {
@@ -169,13 +175,12 @@ const mkdirSync = module.exports.sync = (dir, opt) => {
     return done(mkdirp.sync(dir, mode))
 
   const sub = path.relative(cwd, dir)
-  const parts = sub.split(/\/|\\/)
+  const parts = sub.split('/')
   let created = null
   for (let p = parts.shift(), part = cwd;
-       p && (part += '/' + p);
-       p = parts.shift()) {
-
-    if (cache.get(part))
+      p && (part += '/' + p);
+      p = parts.shift()) {
+    if (cGet(cache, part))
       continue
 
     try {
@@ -189,13 +194,13 @@ const mkdirSync = module.exports.sync = (dir, opt) => {
 
       const st = fs.lstatSync(part)
       if (st.isDirectory()) {
-        cache.set(part, true)
+        cSet(cache, part, true)
         continue
       } else if (unlink) {
         fs.unlinkSync(part)
         fs.mkdirSync(part, mode)
         created = created || part
-        cache.set(part, true)
+        cSet(cache, part, true)
         continue
       } else if (st.isSymbolicLink())
         return new SymlinkError(part, part + '/' + parts.join('/'))
diff --git a/lib/normalize-windows-path.js b/lib/normalize-windows-path.js
new file mode 100644
index 0000000..eb13ba0
--- /dev/null
+++ b/lib/normalize-windows-path.js
@@ -0,0 +1,8 @@
+// on windows, either \ or / are valid directory separators.
+// on unix, \ is a valid character in filenames.
+// so, on windows, and only on windows, we replace all \ chars with /,
+// so that we can use / as our one and only directory separator char.
+
+const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform
+module.exports = platform !== 'win32' ? p => p
+  : p => p && p.replace(/\\/g, '/')
diff --git a/lib/pack.js b/lib/pack.js
index 857cea9..89aa24a 100644
--- a/lib/pack.js
+++ b/lib/pack.js
@@ -56,6 +56,7 @@ const ONDRAIN = Symbol('ondrain')
 const fs = require('fs')
 const path = require('path')
 const warner = require('./warn-mixin.js')
+const normPath = require('./normalize-windows-path.js')
 
 const Pack = warner(class Pack extends MiniPass {
   constructor (opt) {
@@ -67,7 +68,7 @@ const Pack = warner(class Pack extends MiniPass {
     this.preservePaths = !!opt.preservePaths
     this.strict = !!opt.strict
     this.noPax = !!opt.noPax
-    this.prefix = (opt.prefix || '').replace(/(\\|\/)+$/, '')
+    this.prefix = normPath(opt.prefix || '').replace(/\/+$/, '')
     this.linkCache = opt.linkCache || new Map()
     this.statCache = opt.statCache || new Map()
     this.readdirCache = opt.readdirCache || new Map()
@@ -132,7 +133,7 @@ const Pack = warner(class Pack extends MiniPass {
   }
 
   [ADDTARENTRY] (p) {
-    const absolute = path.resolve(this.cwd, p.path)
+    const absolute = normPath(path.resolve(this.cwd, p.path))
     if (this.prefix)
       p.path = this.prefix + '/' + p.path.replace(/^\.(\/+|$)/, '')
 
@@ -151,7 +152,7 @@ const Pack = warner(class Pack extends MiniPass {
   }
 
   [ADDFSENTRY] (p) {
-    const absolute = path.resolve(this.cwd, p)
+    const absolute = normPath(path.resolve(this.cwd, p))
     if (this.prefix)
       p = this.prefix + '/' + p.replace(/^\.(\/+|$)/, '')
 
diff --git a/lib/unpack.js b/lib/unpack.js
index 52550eb..4e46bd2 100644
--- a/lib/unpack.js
+++ b/lib/unpack.js
@@ -10,6 +10,7 @@ const mkdir = require('./mkdir.js')
 const mkdirSync = mkdir.sync
 const wc = require('./winchars.js')
 const stripAbsolutePath = require('./strip-absolute-path.js')
+const normPath = require('./normalize-windows-path.js')
 
 const ONENTRY = Symbol('onEntry')
 const CHECKFS = Symbol('checkFs')
@@ -80,6 +81,18 @@ const uint32 = (a, b, c) =>
   : b === b >>> 0 ? b
   : c
 
+
+const pruneCache = (cache, abs) => {
+  // clear the cache if it's a case-insensitive match, since we can't
+  // know if the current file system is case-sensitive or not.
+  abs = normPath(abs).toLowerCase()
+  for (const path of cache.keys()) {
+    const plower = path.toLowerCase()
+    if (plower === abs || plower.toLowerCase().indexOf(abs + '/') === 0)
+      cache.delete(path)
+  }
+}
+
 class Unpack extends Parser {
   constructor (opt) {
     if (!opt)
@@ -154,7 +167,7 @@ class Unpack extends Parser {
     // links, and removes symlink directories rather than erroring
     this.unlink = !!opt.unlink
 
-    this.cwd = path.resolve(opt.cwd || process.cwd())
+    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))
     this.strip = +opt.strip || 0
     this.processUmask = process.umask()
     this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask
@@ -175,22 +188,22 @@ class Unpack extends Parser {
 
   [CHECKPATH] (entry) {
     if (this.strip) {
-      const parts = entry.path.split(/\/|\\/)
+      const parts = normPath(entry.path).split('/')
       if (parts.length < this.strip)
         return false
       entry.path = parts.slice(this.strip).join('/')
 
       if (entry.type === 'Link') {
-        const linkparts = entry.linkpath.split(/\/|\\/)
+        const linkparts = normPath(entry.linkpath).split('/')
         if (linkparts.length >= this.strip)
           entry.linkpath = linkparts.slice(this.strip).join('/')
       }
     }
 
     if (!this.preservePaths) {
-      const p = entry.path
-      if (p.match(/(^|\/|\\)\.\.(\\|\/|$)/)) {
-        this.warn('path contains \'..\'', p)
+      const p = normPath(entry.path)
+      if (p.split('/').includes('..')) {
+        this.warn(`path contains '..'`, p)
         return false
       }
 
@@ -211,9 +224,9 @@ class Unpack extends Parser {
     }
 
     if (path.isAbsolute(entry.path))
-      entry.absolute = entry.path
+      entry.absolute = normPath(entry.path)
     else
-      entry.absolute = path.resolve(this.cwd, entry.path)
+      entry.absolute = normPath(path.resolve(this.cwd, entry.path))
 
     return true
   }
@@ -258,7 +271,7 @@ class Unpack extends Parser {
   }
 
   [MKDIR] (dir, mode, cb) {
-    mkdir(dir, {
+    mkdir(normPath(dir), {
       uid: this.uid,
       gid: this.gid,
       processUid: this.processUid,
@@ -383,7 +396,8 @@ class Unpack extends Parser {
   }
 
   [HARDLINK] (entry) {
-    this[LINK](entry, path.resolve(this.cwd, entry.linkpath), 'link')
+    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))
+    this[LINK](entry, linkpath, 'link')
   }
 
   [PEND] () {
@@ -419,12 +433,7 @@ class Unpack extends Parser {
     // previously, and it is no longer going to be a directory, and neither
     // is any of its children.
     if (entry.type !== 'Directory') {
-      for (const path of this.dirCache.keys()) {
-        if (path === entry.absolute ||
-            path.indexOf(entry.absolute + '/') === 0 ||
-            path.indexOf(entry.absolute + '\\') === 0)
-          this.dirCache.delete(path)
-      }
+      pruneCache(this.dirCache, entry.absolute)
     }
     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {
       if (er)
@@ -471,7 +480,7 @@ class Unpack extends Parser {
   }
 
   [LINK] (entry, linkpath, link) {
-    // XXX: get the type ('file' or 'dir') for windows
+    // XXX: get the type ('symlink' or 'junction') for windows
     fs[link](linkpath, entry.absolute, er => {
       if (er)
         return this[ONERROR](er, entry)
@@ -488,12 +497,7 @@ class UnpackSync extends Unpack {
 
   [CHECKFS] (entry) {
     if (entry.type !== 'Directory') {
-      for (const path of this.dirCache.keys()) {
-        if (path === entry.absolute ||
-            path.indexOf(entry.absolute + '/') === 0 ||
-            path.indexOf(entry.absolute + '\\') === 0)
-          this.dirCache.delete(path)
-      }
+      pruneCache(this.dirCache, entry.absolute)
     }
     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode)
     if (er)
@@ -611,7 +615,7 @@ class UnpackSync extends Unpack {
 
   [MKDIR] (dir, mode) {
     try {
-      return mkdir.sync(dir, {
+      return mkdir.sync(normPath(dir), {
         uid: this.uid,
         gid: this.gid,
         processUid: this.processUid,
diff --git a/lib/write-entry.js b/lib/write-entry.js
index d7c347f..06db3e9 100644
--- a/lib/write-entry.js
+++ b/lib/write-entry.js
@@ -6,6 +6,7 @@ const Header = require('./header.js')
 const ReadEntry = require('./read-entry.js')
 const fs = require('fs')
 const path = require('path')
+const normPath = require('./normalize-windows-path.js')
 
 const types = require('./types.js')
 const maxReadSize = 16 * 1024 * 1024
@@ -36,7 +37,7 @@ const WriteEntry = warner(class WriteEntry extends MiniPass {
     super(opt)
     if (typeof p !== 'string')
       throw new TypeError('path is required')
-    this.path = p
+    this.path = normPath(p)
     // suppress atime, ctime, uid, gid, uname, gname
     this.portable = !!opt.portable
     // until node has builtin pwnam functions, this'll have to do
@@ -69,7 +70,7 @@ const WriteEntry = warner(class WriteEntry extends MiniPass {
       p = p.replace(/\\/g, '/')
     }
 
-    this.absolute = opt.absolute || path.resolve(this.cwd, p)
+    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))
 
     if (this.path === '')
       this.path = './'
diff --git a/test/normalize-windows-path.js b/test/normalize-windows-path.js
new file mode 100644
index 0000000..af3883c
--- /dev/null
+++ b/test/normalize-windows-path.js
@@ -0,0 +1,31 @@
+const t = require('tap')
+
+const realPlatform = process.platform
+const fakePlatform = realPlatform === 'win32' ? 'posix' : 'win32'
+
+function reload(mod) {
+  delete require.cache[require.resolve(mod)];
+  return require(mod)
+}
+
+t.test('posix', t => {
+  if (realPlatform === 'win32')
+    process.env.TESTING_TAR_FAKE_PLATFORM = fakePlatform
+  else
+    delete process.env.TESTING_TAR_FAKE_PLATFORM
+  const normPath = reload('../lib/normalize-windows-path.js')
+  t.equal(normPath('/some/path/back\\slashes'), '/some/path/back\\slashes')
+  t.equal(normPath('c:\\foo\\bar'), 'c:\\foo\\bar')
+  t.end()
+})
+
+t.test('win32', t => {
+  if (realPlatform !== 'win32')
+    process.env.TESTING_TAR_FAKE_PLATFORM = fakePlatform
+  else
+    delete process.env.TESTING_TAR_FAKE_PLATFORM
+  const normPath = reload('../lib/normalize-windows-path.js')
+  t.equal(normPath('/some/path/back\\slashes'), '/some/path/back/slashes')
+  t.equal(normPath('c:\\foo\\bar'), 'c:/foo/bar')
+  t.end()
+})
-- 
2.39.3

