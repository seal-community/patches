From ab870fde3d0855bfa07c98a54b5e6a2ae938ede6 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Sun, 28 Jan 2024 15:35:19 +0200
Subject: [PATCH 1/5] Seal Security Hotfix for tar 4.4.13

This patch fixes:
  CVE-2021-32803

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/isaacs/node-tar/tree/v4.4.13
---
 lib/unpack.js  | 20 +++++++++++++++++++
 test/unpack.js | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 72 insertions(+)

diff --git a/lib/unpack.js b/lib/unpack.js
index fc76509..b6dc2f5 100644
--- a/lib/unpack.js
+++ b/lib/unpack.js
@@ -413,6 +413,18 @@ class Unpack extends Parser {
   // check if a thing is there, and if so, try to clobber it
   [CHECKFS] (entry) {
     this[PEND]()
+    // if we are not creating a directory, and the path is in the dirCache,
+    // then that means we are about to delete the directory we created
+    // previously, and it is no longer going to be a directory, and neither
+    // is any of its children.
+    if (entry.type !== 'Directory') {
+      for (const path of this.dirCache.keys()) {
+        if (path === entry.absolute ||
+            path.indexOf(entry.absolute + '/') === 0 ||
+            path.indexOf(entry.absolute + '\\') === 0)
+          this.dirCache.delete(path)
+      }
+    }
     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {
       if (er)
         return this[ONERROR](er, entry)
@@ -474,6 +486,14 @@ class UnpackSync extends Unpack {
   }
 
   [CHECKFS] (entry) {
+    if (entry.type !== 'Directory') {
+      for (const path of this.dirCache.keys()) {
+        if (path === entry.absolute ||
+            path.indexOf(entry.absolute + '/') === 0 ||
+            path.indexOf(entry.absolute + '\\') === 0)
+          this.dirCache.delete(path)
+      }
+    }
     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode)
     if (er)
       return this[ONERROR](er, entry)
diff --git a/test/unpack.js b/test/unpack.js
index e190dfc..b9539b8 100644
--- a/test/unpack.js
+++ b/test/unpack.js
@@ -2493,3 +2493,55 @@ t.test('do not reuse hardlinks, only nlink=1 files', t => {
 
   t.end()
 })
+
+t.test('drop entry from dirCache if no longer a directory', t => {
+  const dir = path.resolve(unpackdir, 'dir-cache-error')
+  mkdirp.sync(dir + '/sync/y')
+  mkdirp.sync(dir + '/async/y')
+  const data = makeTar([
+    {
+      path: 'x',
+      type: 'Directory',
+    },
+    {
+      path: 'x',
+      type: 'SymbolicLink',
+      linkpath: './y',
+    },
+    {
+      path: 'x/ginkoid',
+      type: 'File',
+      size: 'ginkoid'.length,
+    },
+    'ginkoid',
+    '',
+    '',
+  ])
+  t.plan(2)
+  const WARNINGS = {}
+  const check = (t, path) => {
+    t.equal(fs.statSync(path + '/x').isDirectory(), true)
+    t.equal(fs.lstatSync(path + '/x').isSymbolicLink(), true)
+    t.equal(fs.statSync(path + '/y').isDirectory(), true)
+    t.strictSame(fs.readdirSync(path + '/y'), [])
+    t.throws(() => fs.readFileSync(path + '/x/ginkoid'), { code: 'ENOENT' })
+    t.strictSame(WARNINGS[path], [
+      'Cannot extract through symbolic link',
+    ])
+    t.end()
+  }
+  t.test('async', t => {
+    const path = dir + '/async'
+    new Unpack({ cwd: path })
+      .on('warn', (msg) => WARNINGS[path] = [msg])
+      .on('end', () => check(t, path))
+      .end(data)
+  })
+  t.test('sync', t => {
+    const path = dir + '/sync'
+    new UnpackSync({ cwd: path })
+      .on('warn', (msg) => WARNINGS[path] = [msg])
+      .end(data)
+    check(t, path)
+  })
+})
\ No newline at end of file
-- 


