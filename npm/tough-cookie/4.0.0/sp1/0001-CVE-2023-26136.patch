From fe6a6b699277c64eaf672b0a2698082da66c5f10 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Thu, 4 Jan 2024 13:11:38 +0200
Subject: [PATCH 1/1] Seal Security Hotfix for tough-cookie 4.0.0

This patch fixes:
  CVE-2023-26136

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/salesforce/tough-cookie/tree/v4.0.0
---
 lib/memstore.js         |  8 ++++----
 test/cookie_jar_test.js | 26 +++++++++++++++++++++++++-
 2 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/lib/memstore.js b/lib/memstore.js
index 912eead..5127dcc 100644
--- a/lib/memstore.js
+++ b/lib/memstore.js
@@ -39,7 +39,7 @@ class MemoryCookieStore extends Store {
   constructor() {
     super();
     this.synchronous = true;
-    this.idx = {};
+    this.idx = Object.create(null);
     if (util.inspect.custom) {
       this[util.inspect.custom] = this.inspect;
     }
@@ -109,10 +109,10 @@ class MemoryCookieStore extends Store {
 
   putCookie(cookie, cb) {
     if (!this.idx[cookie.domain]) {
-      this.idx[cookie.domain] = {};
+      this.idx[cookie.domain] = Object.create(null);
     }
     if (!this.idx[cookie.domain][cookie.path]) {
-      this.idx[cookie.domain][cookie.path] = {};
+      this.idx[cookie.domain][cookie.path] = Object.create(null);
     }
     this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
     cb(null);
@@ -144,7 +144,7 @@ class MemoryCookieStore extends Store {
     return cb(null);
   }
   removeAllCookies(cb) {
-    this.idx = {};
+    this.idx = Object.create(null);
     return cb(null);
   }
   getAllCookies(cb) {
diff --git a/test/cookie_jar_test.js b/test/cookie_jar_test.js
index 9a5d382..5741c66 100644
--- a/test/cookie_jar_test.js
+++ b/test/cookie_jar_test.js
@@ -668,5 +668,29 @@ vows
         }
       }
     }
-  })
+  }).addBatch({
+    "Issue #282 - Prototype pollution": {
+    "when setting a cookie with the domain __proto__": {
+            topic: function() {
+              const jar = new tough.CookieJar(undefined, {
+                rejectPublicSuffixes: false
+              });
+              // try to pollute the prototype
+              jar.setCookieSync(
+                "Slonser=polluted; Domain=__proto__; Path=/notauth",
+                "https://__proto__/admin"
+              );
+              jar.setCookieSync(
+                "Auth=Lol; Domain=google.com; Path=/notauth",
+                "https://google.com/"
+              );
+              this.callback();
+            },
+            "results in a cookie that is not affected by the attempted prototype pollution": function() {
+              const pollutedObject = {};
+              assert(pollutedObject["/notauth"] === undefined);
+            }
+          }
+        }
+      })
   .export(module);
-- 

