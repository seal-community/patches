From a28f7e85981a77506fb14a9d3930fd1192b55864 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Mon, 22 May 2023 16:27:22 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for webpack 5.74.0

This patch fixes:
  CVE-2023-28154

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/webpack/webpack/tree/v5.74.0
---
 lib/dependencies/ImportParserPlugin.js    |  8 ++++----
 lib/javascript/JavascriptParser.js        | 18 ++++++++++++++----
 test/cases/chunks/inline-options/index.js | 10 ++++++++++
 3 files changed, 28 insertions(+), 8 deletions(-)

diff --git a/lib/dependencies/ImportParserPlugin.js b/lib/dependencies/ImportParserPlugin.js
index 151ff89ad..718b04828 100644
--- a/lib/dependencies/ImportParserPlugin.js
+++ b/lib/dependencies/ImportParserPlugin.js
@@ -137,7 +137,7 @@ class ImportParserPlugin {
 				if (importOptions.webpackInclude !== undefined) {
 					if (
 						!importOptions.webpackInclude ||
-						importOptions.webpackInclude.constructor.name !== "RegExp"
+						!(importOptions.webpackInclude instanceof RegExp)
 					) {
 						parser.state.module.addWarning(
 							new UnsupportedFeatureWarning(
@@ -146,13 +146,13 @@ class ImportParserPlugin {
 							)
 						);
 					} else {
-						include = new RegExp(importOptions.webpackInclude);
+						include = importOptions.webpackInclude;
 					}
 				}
 				if (importOptions.webpackExclude !== undefined) {
 					if (
 						!importOptions.webpackExclude ||
-						importOptions.webpackExclude.constructor.name !== "RegExp"
+						!(importOptions.webpackExclude instanceof RegExp)
 					) {
 						parser.state.module.addWarning(
 							new UnsupportedFeatureWarning(
@@ -161,7 +161,7 @@ class ImportParserPlugin {
 							)
 						);
 					} else {
-						exclude = new RegExp(importOptions.webpackExclude);
+						exclude = importOptions.webpackExclude;
 					}
 				}
 				if (importOptions.webpackExports !== undefined) {
diff --git a/lib/javascript/JavascriptParser.js b/lib/javascript/JavascriptParser.js
index c10c7b16e..58bcc4a64 100644
--- a/lib/javascript/JavascriptParser.js
+++ b/lib/javascript/JavascriptParser.js
@@ -3635,17 +3635,27 @@ class JavascriptParser extends Parser {
 			return EMPTY_COMMENT_OPTIONS;
 		}
 		let options = {};
+		/** @type {unknown[]} */
 		let errors = [];
 		for (const comment of comments) {
 			const { value } = comment;
 			if (value && webpackCommentRegExp.test(value)) {
 				// try compile only if webpack options comment is present
 				try {
-					const val = vm.runInNewContext(`(function(){return {${value}};})()`);
-					Object.assign(options, val);
+					for (let [key, val] of Object.entries(
+						vm.runInNewContext(`(function(){return {${value}};})()`)
+					)) {
+						if (typeof val === "object" && val !== null) {
+							if (val.constructor.name === "RegExp") val = new RegExp(val);
+							else val = JSON.parse(JSON.stringify(val));
+						}
+						options[key] = val;
+					}
 				} catch (e) {
-					e.comment = comment;
-					errors.push(e);
+					const newErr = new Error(String(e.message));
+					newErr.stack = String(e.stack);
+					Object.assign(newErr, { comment });
+					errors.push(newErr);
 				}
 			}
 		}
diff --git a/test/cases/chunks/inline-options/index.js b/test/cases/chunks/inline-options/index.js
index e4a83c178..86b65206c 100644
--- a/test/cases/chunks/inline-options/index.js
+++ b/test/cases/chunks/inline-options/index.js
@@ -180,6 +180,16 @@ if (process.env.NODE_ENV === "production") {
 			}
 		);
 	});
+
+	it("CVE-2023-28154 webpackExports should sanitize returned objects to not allow overriding every()", function () {
+		return import(/* webpackExports: ((() => {
+			    const a = ["a"];
+			    a.every = 5;
+			    return a;
+    	})()) */ "./dir1/a").then(module => {
+		expect(module.default).toEqual("a");
+	})
+	});
 }
 
 function testChunkLoading(load, expectedSyncInitial, expectedSyncRequested) {
-- 
2.39.2 (Apple Git-143)

