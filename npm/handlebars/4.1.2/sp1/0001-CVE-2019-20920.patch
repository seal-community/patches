From b1ecf0b277f7ff5195c3cc279e6ff3d4e54b2f4e Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Tue, 23 May 2023 11:53:24 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for handlebars 4.1.2

This patch fixes:
  CVE-2019-20920

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/handlebars-lang/handlebars.js/tree/v4.1.2
---
 .gitmodules                                   |  2 +-
 bench/util/benchwarmer.js                     | 11 ++++-----
 lib/handlebars/compiler/code-gen.js           | 12 ++++------
 lib/handlebars/compiler/compiler.js           | 15 ++----------
 .../compiler/javascript-compiler.js           | 24 ++++++++++++-------
 lib/handlebars/helpers/each.js                | 20 +++++++---------
 lib/handlebars/helpers/lookup.js              |  4 +++-
 spec/compiler.js                              |  2 +-
 spec/regressions.js                           |  4 ++--
 spec/security.js                              | 16 +++++++++++++
 10 files changed, 59 insertions(+), 51 deletions(-)

diff --git a/.gitmodules b/.gitmodules
index 1739275..09cc7fd 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,3 @@
 [submodule "spec/mustache"]
 	path = spec/mustache
-	url = git://github.com/mustache/spec.git
+	url = https://github.com/mustache/spec.git
diff --git a/bench/util/benchwarmer.js b/bench/util/benchwarmer.js
index 49f66f7..58f138a 100644
--- a/bench/util/benchwarmer.js
+++ b/bench/util/benchwarmer.js
@@ -29,7 +29,7 @@ BenchWarmer.prototype = {
     });
   },
   push: function(name, fn) {
-    if (this.names.indexOf(name) == -1) {
+    if (this.names.indexOf(name) === -1) {
       this.names.push(name);
     }
 
@@ -77,7 +77,7 @@ BenchWarmer.prototype = {
 
         var errors = false, prop, bench;
         for (prop in self.errors) {
-          if (self.errors.hasOwnProperty(prop)
+          if (Object.prototype.hasOwnProperty.call(self, prop)
               && self.errors[prop].error.message !== 'EWOT') {
             errors = true;
             break;
@@ -86,9 +86,8 @@ BenchWarmer.prototype = {
 
         if (errors) {
           print('\n\nErrors:\n');
-          for (prop in self.errors) {
-            if (self.errors.hasOwnProperty(prop)
-                && self.errors[prop].error.message !== 'EWOT') {
+          Object.keys(self.errors).forEach(function(prop) {
+            if (self.errors[prop].error.message !== 'EWOT') {
               bench = self.errors[prop];
               print('\n' + bench.name + ':\n');
               print(bench.error.message);
@@ -97,7 +96,7 @@ BenchWarmer.prototype = {
               }
               print('\n');
             }
-          }
+          });
         }
 
         callback();
diff --git a/lib/handlebars/compiler/code-gen.js b/lib/handlebars/compiler/code-gen.js
index 43c0481..30c5af7 100644
--- a/lib/handlebars/compiler/code-gen.js
+++ b/lib/handlebars/compiler/code-gen.js
@@ -125,14 +125,12 @@ CodeGen.prototype = {
   objectLiteral: function(obj) {
     let pairs = [];
 
-    for (let key in obj) {
-      if (obj.hasOwnProperty(key)) {
-        let value = castChunk(obj[key], this);
-        if (value !== 'undefined') {
-          pairs.push([this.quotedString(key), ':', value]);
-        }
+    Object.keys(obj).forEach(key => {
+      let value = castChunk(obj[key], this);
+      if (value !== 'undefined') {
+        pairs.push([this.quotedString(key), ':', value]);
       }
-    }
+    });
 
     let ret = this.generateList(pairs);
     ret.prepend('{');
diff --git a/lib/handlebars/compiler/compiler.js b/lib/handlebars/compiler/compiler.js
index 894f7a7..b56ca5c 100644
--- a/lib/handlebars/compiler/compiler.js
+++ b/lib/handlebars/compiler/compiler.js
@@ -54,9 +54,7 @@ Compiler.prototype = {
 
     options.blockParams = options.blockParams || [];
 
-    // These changes will propagate to the other compiler components
-    let knownHelpers = options.knownHelpers;
-    options.knownHelpers = {
+    options.knownHelpers = extend(Object.create(null), {
       'helperMissing': true,
       'blockHelperMissing': true,
       'each': true,
@@ -65,15 +63,7 @@ Compiler.prototype = {
       'with': true,
       'log': true,
       'lookup': true
-    };
-    if (knownHelpers) {
-      // the next line should use "Object.keys", but the code has been like this a long time and changing it, might
-      // cause backwards-compatibility issues... It's an old library...
-      // eslint-disable-next-line guard-for-in
-      for (let name in knownHelpers) {
-          this.options.knownHelpers[name] = knownHelpers[name];
-      }
-    }
+    }, options.knownHelpers);
 
     return this.accept(program);
   },
@@ -369,7 +359,6 @@ Compiler.prototype = {
     if (isEligible && !isHelper) {
       let name = sexpr.path.parts[0],
           options = this.options;
-
       if (options.knownHelpers[name]) {
         isHelper = true;
       } else if (options.knownHelpersOnly) {
diff --git a/lib/handlebars/compiler/javascript-compiler.js b/lib/handlebars/compiler/javascript-compiler.js
index ff98ad9..afab6ec 100644
--- a/lib/handlebars/compiler/javascript-compiler.js
+++ b/lib/handlebars/compiler/javascript-compiler.js
@@ -2,6 +2,7 @@ import { COMPILER_REVISION, REVISION_CHANGES } from '../base';
 import Exception from '../exception';
 import {isArray} from '../utils';
 import CodeGen from './code-gen';
+import {dangerousPropertyRegex} from '../helpers/lookup';
 
 function Literal(value) {
   this.value = value;
@@ -13,13 +14,18 @@ JavaScriptCompiler.prototype = {
   // PUBLIC API: You can override these methods in a subclass to provide
   // alternative compiled forms for name lookup and buffering semantics
   nameLookup: function(parent, name/* , type*/) {
-    if (name === 'constructor') {
-      return ['(', parent, '.propertyIsEnumerable(\'constructor\') ? ', parent, '.constructor : undefined', ')'];
+    if (dangerousPropertyRegex.test(name)) {
+      const isEnumerable = [ this.aliasable('container.propertyIsEnumerable'), '.call(', parent, ',', JSON.stringify(name), ')'];
+      return ['(', isEnumerable, '?', _actualLookup(), ' : undefined)'];
     }
-    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
-      return [parent, '.', name];
-    } else {
-      return [parent, '[', JSON.stringify(name), ']'];
+    return _actualLookup();
+
+    function _actualLookup() {
+      if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
+        return [parent, '.', name];
+      } else {
+        return [parent, '[', JSON.stringify(name), ']'];
+      }
     }
   },
   depthedLookup: function(name) {
@@ -212,14 +218,14 @@ JavaScriptCompiler.prototype = {
     // aliases will not be used, but this case is already being run on the client and
     // we aren't concern about minimizing the template size.
     let aliasCount = 0;
-    for (let alias in this.aliases) { // eslint-disable-line guard-for-in
+    Object.keys(this.aliases).forEach(alias => {
       let node = this.aliases[alias];
 
-      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
+      if (node.children && node.referenceCount > 1) {
         varDeclarations += ', alias' + (++aliasCount) + '=' + alias;
         node.children[0] = 'alias' + aliasCount;
       }
-    }
+    });
 
     let params = ['container', 'depth0', 'helpers', 'partials', 'data'];
 
diff --git a/lib/handlebars/helpers/each.js b/lib/handlebars/helpers/each.js
index fb11903..d369551 100644
--- a/lib/handlebars/helpers/each.js
+++ b/lib/handlebars/helpers/each.js
@@ -52,18 +52,16 @@ export default function(instance) {
       } else {
         let priorKey;
 
-        for (let key in context) {
-          if (context.hasOwnProperty(key)) {
-            // We're running the iterations one step out of sync so we can detect
-            // the last iteration without have to scan the object twice and create
-            // an itermediate keys array.
-            if (priorKey !== undefined) {
-              execIteration(priorKey, i - 1);
-            }
-            priorKey = key;
-            i++;
+        Object.keys(context).forEach(key => {
+          // We're running the iterations one step out of sync so we can detect
+          // the last iteration without have to scan the object twice and create
+          // an itermediate keys array.
+          if (priorKey !== undefined) {
+            execIteration(priorKey, i - 1);
           }
-        }
+          priorKey = key;
+          i++;
+        });
         if (priorKey !== undefined) {
           execIteration(priorKey, i - 1, true);
         }
diff --git a/lib/handlebars/helpers/lookup.js b/lib/handlebars/helpers/lookup.js
index dcd5851..8c1b604 100644
--- a/lib/handlebars/helpers/lookup.js
+++ b/lib/handlebars/helpers/lookup.js
@@ -1,9 +1,11 @@
+export const dangerousPropertyRegex = /^(constructor|__defineGetter__|__defineSetter__|__lookupGetter__|__proto__)$/;
+
 export default function(instance) {
   instance.registerHelper('lookup', function(obj, field) {
     if (!obj) {
       return obj;
     }
-    if (field === 'constructor' && !obj.propertyIsEnumerable(field)) {
+    if (dangerousPropertyRegex.test(String(field)) && !Object.prototype.propertyIsEnumerable.call(obj, field)) {
       return undefined;
     }
     return obj[field];
diff --git a/spec/compiler.js b/spec/compiler.js
index 02dad67..3d37b59 100644
--- a/spec/compiler.js
+++ b/spec/compiler.js
@@ -59,7 +59,7 @@ describe('compiler', function() {
         Handlebars.compile(' \n  {{#if}}\n{{/def}}')();
         equal(true, false, 'Statement must throw exception. This line should not be executed.');
       } catch (err) {
-        equal(err.propertyIsEnumerable('column'), true, 'Checking error column');
+        equal(Object.prototype.propertyIsEnumerable.call(err, 'column'), true, 'Checking error column');
       }
     });
 
diff --git a/spec/regressions.js b/spec/regressions.js
index 1678d80..8236e7e 100644
--- a/spec/regressions.js
+++ b/spec/regressions.js
@@ -211,12 +211,12 @@ describe('Regressions', function() {
         // It's valid to execute a block against an undefined context, but
         // helpers can not do so, so we expect to have an empty object here;
         for (var name in this) {
-          if (this.hasOwnProperty(name)) {
+          if (Object.prototype.hasOwnProperty.call(this, name)) {
             return 'found';
           }
         }
         // And to make IE happy, check for the known string as length is not enumerated.
-        return (this == 'bat' ? 'found' : 'not');
+        return (this === 'bat' ? 'found' : 'not');
       }
     };
 
diff --git a/spec/security.js b/spec/security.js
index 4a7d837..655c02b 100644
--- a/spec/security.js
+++ b/spec/security.js
@@ -32,4 +32,20 @@ describe('security issues', function() {
 
         });
     });
+
+    describe('GH-1595', function() {
+      it('properties, that are required to be enumerable', function() {
+        shouldCompileTo('{{constructor}}', {}, '');
+        shouldCompileTo('{{__defineGetter__}}', {}, '');
+        shouldCompileTo('{{__defineSetter__}}', {}, '');
+        shouldCompileTo('{{__lookupGetter__}}', {}, '');
+        shouldCompileTo('{{__proto__}}', {}, '');
+
+        shouldCompileTo('{{lookup "constructor"}}', {}, '');
+        shouldCompileTo('{{lookup "__defineGetter__"}}', {}, '');
+        shouldCompileTo('{{lookup "__defineSetter__"}}', {}, '');
+        shouldCompileTo('{{lookup "__lookupGetter__"}}', {}, '');
+        shouldCompileTo('{{lookup "__proto__"}}', {}, '');
+      });
+    });
 });
-- 
2.39.2 (Apple Git-143)

