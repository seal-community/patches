From f223f2df70f2da211c23e36fb4176f6c89a65439 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Mon, 13 Feb 2023 18:24:54 +0200
Subject: [PATCH 1/1] Seal Security Hotfix for json5 0.5.1

This patch fixes:
  CVE-2022-46175

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/json5/json5/tree/v0.5.1
---
 lib/json5.js  | 41 +++++++++++++++++++++++++++++++++--------
 test/parse.js |  3 +++
 2 files changed, 36 insertions(+), 8 deletions(-)

diff --git a/lib/json5.js b/lib/json5.js
index 4a4590d..f9b7584 100644
--- a/lib/json5.js
+++ b/lib/json5.js
@@ -456,7 +456,12 @@ JSON5.parse = (function () {
 
                     white();
                     next(':');
-                    object[key] = value();
+                    Object.defineProperty(object, key, {
+                        value: value(),
+                        writable: true,
+                        enumerable: true,
+                        configurable: true,
+                    })
                     white();
                     // If there's no comma after this pair, this needs to be
                     // the end of the object.
@@ -518,15 +523,35 @@ JSON5.parse = (function () {
 // result.
 
         return typeof reviver === 'function' ? (function walk(holder, key) {
-            var k, v, value = holder[key];
+            var value = holder[key];
             if (value && typeof value === 'object') {
-                for (k in value) {
-                    if (Object.prototype.hasOwnProperty.call(value, k)) {
-                        v = walk(value, k);
-                        if (v !== undefined) {
-                            value[k] = v;
+                if (Array.isArray(value)) {
+                    for (var i = 0; i < value.length; i++) {
+                        var key = String(i)
+                        var replacement = walk(value, key)
+                        if (replacement === undefined) {
+                            delete value[key]
                         } else {
-                            delete value[k];
+                            Object.defineProperty(value, key, {
+                                value: replacement,
+                                writable: true,
+                                enumerable: true,
+                                configurable: true,
+                            })
+                        }
+                    }
+                } else {
+                    for (var key in value) {
+                        var replacement = walk(value, key)
+                        if (replacement === undefined) {
+                            delete value[key]
+                        } else {
+                            Object.defineProperty(value, key, {
+                                value: replacement,
+                                writable: true,
+                                enumerable: true,
+                                configurable: true,
+                            })
                         }
                     }
                 }
diff --git a/test/parse.js b/test/parse.js
index 0e20c53..2f15c9e 100644
--- a/test/parse.js
+++ b/test/parse.js
@@ -104,6 +104,9 @@ function createTest(fileName, dir) {
                   assert.deepEqual( parseJSON5(), parseES5(),
                     'Expected parsed JSON5 to equal parsed ES5.');
                 }
+                // eslint-disable-next-line no-proto
+                assert.strictEqual(JSON5.parse('{"__proto__":1}').__proto__, 1,
+                    'Preserves __proto__ property names')
                 break;
             case '.js':
                 assert.throws(parseJSON,        // test validation
-- 
2.34.1

