From 722c7f921ef4d57b2a693bc000b5aceec6d6a9c6 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Wed, 28 Feb 2024 18:28:47 +0200
Subject: [PATCH 1/1] Seal Security Hotfix for json-schema 0.2.3

This patch fixes:
  CVE-2021-3918

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/kriszyp/json-schema/tree/v0.2.3
---
 lib/validate.js |  2 +-
 test/tests.js   | 34 +++++++++++++++++++++++++++++++++-
 2 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/lib/validate.js b/lib/validate.js
index 4d0b537..2567049 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -209,7 +209,7 @@ var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*O
 			}
 			
 			for(var i in objTypeDef){ 
-				if(objTypeDef.hasOwnProperty(i)){
+				if(objTypeDef.hasOwnProperty(i) && i != '__proto__'){
 					var value = instance[i];
 					// skip _not_ specified properties
 					if (value === undefined && options.existingOnly) continue;
diff --git a/test/tests.js b/test/tests.js
index 40eeda5..ad3ce68 100644
--- a/test/tests.js
+++ b/test/tests.js
@@ -71,6 +71,37 @@ function assertSelfValidates(doc) {
     return context;
 }
 
+function prototypePollution() {
+    var context = {};
+    const instance = JSON.parse(
+    '{'+
+    '"$schema":{'+
+        '"type": "object",'+
+        '"properties":{'+
+        '"__proto__": {'+
+            '"type": "object",'+
+            '"properties":{'+
+            '"polluted": {'+
+                '"type": "string",'+
+                '"default": "polluted"'+
+            '}'+
+            '}'+
+        '}'+
+        '},'+
+        '"__proto__": {}'+
+    '}'+
+    '}');
+
+    const a = {};
+    context[': validate prototype'] = {
+        topic: validate(instance),
+        'returns valid result': resultIsValid(),
+        'with valid=true': function(result) { assert.equal(result.valid, true); },
+        'and no errors': function(result) { assert.equal(result.errors.length, 0); },
+        'and no pollution':function(){assert.equal(a.polluted, undefined);}
+    };
+    return context;
+}
 var suite = vows.describe('JSON Schema').addBatch({
     'Core-NSD self-validates': assertSelfValidates('schema-nsd'),
     'Core-NSD/Core-NSD': assertValidates('schema-nsd', 'schema-nsd'),
@@ -91,5 +122,6 @@ var suite = vows.describe('JSON Schema').addBatch({
 
     'Json-Ref self-validates': assertSelfValidates('json-ref'),
     'Json-Ref/Hyper': assertValidates('json-ref', 'hyper-schema'),
-    'Json-Ref/Core': assertValidates('json-ref', 'schema')
+    'Json-Ref/Core': assertValidates('json-ref', 'schema'),
+    'validate prototype pollution': prototypePollution(),
 }).export(module);
-- 


