From b06d7e45daad7ab6cac056a1cd84a7e676d46783 Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Thu, 21 Sep 2023 15:40:00 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for underscore 1.4.4

This patch fixes:
  CVE-2021-23358

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/jashkenas/underscore/tree/1.4.4
---
 underscore.js | 24 ++++++++++++++++++++----
 1 file changed, 20 insertions(+), 4 deletions(-)

diff --git a/underscore.js b/underscore.js
index a12f0d9..6846471 100644
--- a/underscore.js
+++ b/underscore.js
@@ -1110,6 +1110,13 @@
 
   var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
 
+  // In order to prevent third-party code injection through
+  // `_.templateSettings.variable`, we test it against the following regular
+  // expression. It is intentionally a bit more liberal than just matching valid
+  // identifiers, but still prevents possible loopholes through defaults or
+  // destructuring assignment.
+  var bareIdentifier = /^\s*(\w|\$)+\s*$/;
+
   // JavaScript micro-templating, similar to John Resig's implementation.
   // Underscore templating handles arbitrary delimiters, preserves whitespace,
   // and correctly escapes quotes within interpolated code.
@@ -1145,15 +1152,24 @@
     });
     source += "';\n";
 
-    // If a variable is not specified, place data values in local scope.
-    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
+    var argument = settings.variable;
+    if (argument) {
+      // Insure against third-party code injection.
+      if (!bareIdentifier.test(argument)) throw new Error(
+        'variable is not a bare identifier: ' + argument
+      );
+    } else {
+      // If a variable is not specified, place data values in local scope.
+      source = 'with(obj||{}){\n' + source + '}\n';
+      argument = 'obj';
+    }
 
     source = "var __t,__p='',__j=Array.prototype.join," +
       "print=function(){__p+=__j.call(arguments,'');};\n" +
       source + "return __p;\n";
 
     try {
-      render = new Function(settings.variable || 'obj', '_', source);
+      render = new Function(argument, '_', source);
     } catch (e) {
       e.source = source;
       throw e;
@@ -1165,7 +1181,7 @@
     };
 
     // Provide the compiled function source as a convenience for precompilation.
-    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
+    template.source = 'function(' + argument + '){\n' + source + '}';
 
     return template;
   };
-- 

