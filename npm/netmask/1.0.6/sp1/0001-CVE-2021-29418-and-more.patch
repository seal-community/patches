From ceab7f4f2ac0de59019ce30d168c7d46121d31cd Mon Sep 17 00:00:00 2001
From: Seal <info@seal.security>
Date: Tue, 6 Jun 2023 12:30:23 +0300
Subject: [PATCH 1/1] Seal Security Hotfix for netmask 1.0.6

This patch fixes:
  CVE-2021-28918
  CVE-2021-29418

For more information see:
  1. https://seal.security
  2. https://github.com/seal-community
  3. https://github.com/rs/node-netmask/tree/1.0.6
---
 lib/netmask.coffee   | 51 +++++++++++++++++++++++++++++++++++++++-----
 test/badnets.coffee  | 13 +++++++++++
 test/netmasks.coffee | 11 ++++++++++
 3 files changed, 70 insertions(+), 5 deletions(-)

diff --git a/lib/netmask.coffee b/lib/netmask.coffee
index 8ab5b6e..d79a25e 100644
--- a/lib/netmask.coffee
+++ b/lib/netmask.coffee
@@ -6,13 +6,54 @@ long2ip = (long) ->
     return [a, b, c, d].join('.')
 
 ip2long = (ip) ->
-    b = (ip + '').split('.');
-    if b.length is 0 or b.length > 4 then throw new Error('Invalid IP')
-    for byte, i in b
-        if isNaN parseInt(byte, 10) then throw new Error("Invalid byte: #{byte}")
-        if byte < 0 or byte > 255 then throw new Error("Invalid byte: #{byte}")
+    b = []
+    for i in [0..3]
+        if ip.length == 0
+            break
+        if i > 0
+            if ip[0] != '.'
+                throw new Error('Invalid IP')
+            ip = ip.substring(1)
+        [n, c] = atob(ip)
+        ip = ip.substring(c)
+        b.push(n)
+    if ip.length != 0
+        throw new Error('Invalid IP')
     return ((b[0] or 0) << 24 | (b[1] or 0) << 16 | (b[2] or 0) << 8 | (b[3] or 0)) >>> 0
 
+atob = (s) ->
+    n = 0
+    base = 10
+    dmax = '9'
+    i = 0
+    if s.length > 1 and s[i] == '0'
+        if s[i+1] == 'x' or s[i+1] == 'X'
+            i+=2
+            base = 16
+        else if '0' <= s[i+1] and s[i+1] <= '7'
+            i++
+            base = 8
+            dmax = '7'
+    start = i
+    chr = (b) -> return b.charCodeAt(0)
+    while s.length > 0
+        if '0' <= s[i] and s[i] <= dmax
+            n = n*base + (chr(s[i])-chr('0'))
+        else if base == 16
+            if 'a' <= s[i] and s[i] <= 'f'
+                n = n*base + (10+chr(s[i])-chr('a'))
+            else if 'A' <= s[i] and s[i] <= 'F'
+                n = n*base + (10+chr(s[i])-chr('A'))
+            else
+                break
+        else
+            break
+        if n > 0xFF
+            throw new Error('byte overflow')
+        i++
+    if i == start
+        throw new Error('empty octet')
+    return [n, i]
 
 class Netmask
     constructor: (net, mask) ->
diff --git a/test/badnets.coffee b/test/badnets.coffee
index a3d3568..3c779c4 100644
--- a/test/badnets.coffee
+++ b/test/badnets.coffee
@@ -32,6 +32,19 @@ vows.describe('IPs with bytes greater than 255')
         'garbage': shouldFailWithError 'Invalid net'
     .export(module)
 
+vows.describe('Invalid IP format')
+    .addBatch
+        ' 1.2.3.4': shouldFailWithError 'Invalid net'
+        '  1.2.3.4': shouldFailWithError 'Invalid net'
+        '1. 2.3.4': shouldFailWithError 'Invalid net'
+        '1.2. 3.4': shouldFailWithError 'Invalid net'
+        '1.2.3. 4': shouldFailWithError 'Invalid net'
+        '1.2.3.4 ': shouldFailWithError 'Invalid net'
+        '1 .2.3.4': shouldFailWithError 'Invalid net'
+        '018.0.0.0': shouldFailWithError 'Invalid net'
+        '0xfg.0.0.0': shouldFailWithError 'Invalid net'
+    .export(module)
+
 vows.describe('Ranges that are a power-of-two big, but are not legal blocks')
     .addBatch
         '218.0.0.0/221.255.255.255': shouldFailWithError 'Invalid mask'
diff --git a/test/netmasks.coffee b/test/netmasks.coffee
index c855c7a..ab81dd2 100644
--- a/test/netmasks.coffee
+++ b/test/netmasks.coffee
@@ -53,6 +53,17 @@ vows.describe('Netmask contains IP')
         'block 192.168.0.0/24':
             topic: -> new Netmask('192.168.0.0/24')
             'does not contain block 192.168': (block) -> assert.ok not block.contains('192.168')
+        'block 31.0.0.0/8':
+            topic: -> new Netmask('31.0.0.0/8')
+            'contains IP 31.5.5.5': (block) -> assert.ok block.contains('31.5.5.5')
+            'does not contain IP 031.5.5.5 (25.5.5.5)': (block) -> assert.ok not block.contains('031.5.5.5')
+            'does not contain IP 0x31.5.5.5 (49.5.5.5)': (block) -> assert.ok not block.contains('0x31.5.5.5')
+            'does not contain IP 0X31.5.5.5 (49.5.5.5)': (block) -> assert.ok not block.contains('0X31.5.5.5')
+        'block 127.0.0.0/8':
+            topic: -> new Netmask('127.0.0.0/8')
+            'contains IP 127.0.0.2': (block) -> assert.ok block.contains('127.0.0.2')
+            'contains IP 0177.0.0.2 (127.0.0.2)': (block) -> assert.ok block.contains('0177.0.0.2')
+            'contains IP 0x7f.0.0.2 (127.0.0.2)': (block) -> assert.ok block.contains('0x7f.0.0.2')
     .export(module)
 
 vows.describe('Netmask forEach')
-- 
2.37.1

